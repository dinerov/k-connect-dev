// –ü–£–® –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø + –ë–ê–ó–û–í–´–ô –ö–ï–® - –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –≤–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±–∞–∑–æ–≤–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
// –í–µ—Ä—Å–∏—è: –ø—É—à-–∫–µ—à-2.1.0 (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ vite-plugin-pwa)

const PUSH_SW_VERSION = '–ü—É—à-–∫–µ—à-2.9';
const PUSH_SW_NAME = '–ö-–ö–æ–Ω–Ω–µ–∫—Ç';
const CACHE_NAME = 'k-connect-cache-v2.9';

// –ê—Å—Å–µ—Ç—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_ASSETS = [
  '/',
  '/manifest.json',
  '/favicon.ico',
  '/icon-192.png',
  '/icon-512.png',
  '/fonts.css'
];

// –ö—Ä–∞—Å–∏–≤—ã–π ASCII-–∞—Ä—Ç –ª–æ–≥–æ—Ç–∏–ø –ö-–ö–æ–Ω–Ω–µ–∫—Ç
const K_CONNECT_LOGO = `
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïê‚ïê‚ïó‚ïî‚ïê‚ïó‚ñà‚ïî‚ïó‚ïî‚ïê‚ïó‚ñà‚ïî‚ïó‚ïî‚ïê‚ïê‚ïê‚ïó‚ïî‚ïê‚ïê‚ïê‚ïó‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïë‚ïë‚ïî‚ïù‚ïë‚ïî‚ïê‚ïó‚ïë‚ïë‚ïë‚ïö‚ïó‚ïë‚ïë‚ïë‚ïë‚ïö‚ïó‚ïë‚ïë‚ïë‚ïî‚ïê‚ïê‚ïù‚ïë‚ïî‚ïê‚ïó‚ïë‚ïë‚ïî‚ïó‚ïî‚ïó‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ïù‚ïù‚ñà‚ïë‚ïë‚ñà‚ïë‚ïë‚ïë‚ïî‚ïó‚ïö‚ïù‚ïë‚ïë‚ïî‚ïó‚ïö‚ïù‚ïë‚ïë‚ïö‚ïê‚ïê‚ïó‚ïë‚ïë‚ñà‚ïö‚ïù‚ïö‚ïù‚ïë‚ïë‚ïö‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïî‚ïó‚ïë‚ñà‚ïë‚ïë‚ñà‚ïë‚ïë‚ïë‚ïë‚ïö‚ïó‚ïë‚ïë‚ïë‚ïë‚ïö‚ïó‚ïë‚ïë‚ïë‚ïî‚ïê‚ïê‚ïù‚ïë‚ïë‚ñà‚ïî‚ïó‚ñà‚ñà‚ïë‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïë‚ïë‚ïö‚ïó‚ïë‚ïö‚ïê‚ïù‚ïë‚ïë‚ïë‚ñà‚ïë‚ïë‚ïë‚ïë‚ïë‚ñà‚ïë‚ïë‚ïë‚ïë‚ïö‚ïê‚ïê‚ïó‚ïë‚ïö‚ïê‚ïù‚ïë‚ñà‚ñà‚ïë‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïö‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïù‚ñà‚ïö‚ïê‚ïù‚ïö‚ïù‚ñà‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïö‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà


                –ß—Ç–æ —Ç–µ–±–µ —Ç—É—Ç –Ω—É–∂–Ω–æ?
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const showLogo = () => {
  console.log(`%c${K_CONNECT_LOGO}`, 'color: #D0BCFF; font-family: monospace; font-size: 18px;');
};

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
showLogo();
console.log(`[${PUSH_SW_NAME}] –≤–µ—Ä—Å–∏—è ${PUSH_SW_VERSION} –∑–∞–ø–∏—á–∫—É—Ä–µ–Ω–∞ –≤ —Ç–≤–æ–π –±—Ä–∞—É–∑–µ—Ä! üéâ`);

self.addEventListener('install', event => {
  console.log(`[${PUSH_SW_NAME}] —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ${PUSH_SW_VERSION} - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É! üöÄ`);
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log(`[${PUSH_SW_NAME}] –∫–µ—à –±–∞–∑–æ–≤—ã—Ö –∞—Å—Å–µ—Ç—Ç–∏–∫–æ–≤ –±—Ä–∞—Ç–æ–∫, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë —á—Ç–æ –Ω—É–∂–Ω–æ! üì¶`);
        return cache.addAll(CACHE_ASSETS);
      })
      .then(() => {
        console.log(`[${PUSH_SW_NAME}] –±–∞–∑–æ–≤—ã–µ –∞—Å—Å–µ—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—á–∫—É—Ä–µ–Ω—ã –±—Ä–∞–¥–æ–∫! ‚úÖ`);
        return self.skipWaiting();
      })
      .then(() => {
        console.log(`[${PUSH_SW_NAME}] —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ`);
      })
      .catch(error => {
        console.error(`[${PUSH_SW_NAME}] –∫–µ—à –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏ —É–º–∏—Ä, –Ω–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üíÄ`, error);
        return self.skipWaiting();
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è - —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
self.addEventListener('activate', event => {
  console.log(`[${PUSH_SW_NAME}] –∞–∫—Ç–∏–≤–∞—Ü–∏—è ${PUSH_SW_VERSION} –í–ó–†–´–í –ß–ï–†–ï–ó 3..2..1.. –ë–£–ú! üí•`);
  
  event.waitUntil(
    // –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log(`[${PUSH_SW_NAME}] —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞: ${cacheName} - –ø—Ä–æ—â–∞–π —Å—Ç–∞—Ä–∏–Ω–∞! üóëÔ∏è`);
            return caches.delete(cacheName);
          }
        })
      );
    })
    .then(() => {
      // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
      console.log(`[${PUSH_SW_NAME}] –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤! üéØ`);
      return self.clients.claim();
    })
    .then(() => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—É—à–∞ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏
      return self.registration.pushManager.getSubscription()
        .then(subscription => {
          if (subscription) {
            console.log(`[${PUSH_SW_NAME}] –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—É—à–∞ —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏! üîÑ`);
            return subscription.unsubscribe();
          }
        })
        .catch(error => {
          console.error(`[${PUSH_SW_NAME}] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:`, error);
        });
    })
    .then(() => {
      console.log(`[${PUSH_SW_NAME}] –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üöÄ`);
    })
  );
});

// Fetch —Å–æ–±—ã—Ç–∏–µ - –æ—Ç–¥–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Å–µ—Ç—ã –∫–æ–≥–¥–∞ –æ—Ñ–ª–∞–π–Ω
self.addEventListener('fetch', event => {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
  if (event.request.method !== 'GET') {
    return;
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
  if (event.request.method !== 'GET' || !event.request.url.startsWith(self.location.origin)) {
    return;
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã - –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è
  if (event.request.url.includes('/api/')) {
    return;
  }

  // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±—É–µ–º —Å–µ—Ç—å —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º –∫–µ—à
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request)
        .catch(() => {
          return caches.match('/');
        })
        .then(response => {
          return response;
        })
    );
    return;
  }

  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±—É–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º —Å–µ—Ç—å
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          console.log(`[${PUSH_SW_NAME}] –Ω–∞—à–ª–∏ –≤ –∫–µ—à–µ: ${event.request.url} üéØ`);
          return response;
        }
        return fetch(event.request);
      })
      .then(response => {
        return response;
      })
      .catch(() => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å—Å–µ—Ç–æ–≤
        if (event.request.url.includes('/manifest.json')) {
          return new Response(JSON.stringify({
            name: '–ö-–ö–æ–Ω–Ω–µ–∫—Ç',
            short_name: '–ö-–ö–æ–Ω–Ω–µ–∫—Ç',
            start_url: '/',
            display: 'standalone'
          }), {
            headers: { 'Content-Type': 'application/json' }
          });
        }
      })
  );
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—à —Å–æ–±—ã—Ç–∏–µ
self.addEventListener('push', function(event) {
  console.log(`[${PUSH_SW_NAME}] –ø–æ–ª—É—á–∏–ª–∏ –ø—É—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üîî`);
  
  if (event.data) {
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      const data = event.data.json();
      const options = {
        body: data.notification.body,
        icon: data.notification.icon || '/icon-192.png',
        badge: '/icon-192.png',
        data: {
          url: data.notification.url || data.notification.link || 'https://k-connect.ru',
          time: Date.now()
        },
        requireInteraction: true,
        tag: 'k-connect-notification-' + Date.now() // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      };

      event.waitUntil(
        self.registration.showNotification('–ö-–ö–æ–Ω–Ω–µ–∫—Ç', options)
          .then(() => {
          })
          .catch(error => {
          })
      );
    } catch (error) {
      // Fallback –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      try {
        const text = event.data.text();
        event.waitUntil(
          self.registration.showNotification('–ö-–ö–æ–Ω–Ω–µ–∫—Ç', {
            body: text,
            icon: '/icon-192.png',
            badge: '/icon-192.png',
            data: {
              url: 'https://k-connect.ru',
              time: Date.now()
            },
            requireInteraction: true,
            tag: 'k-connect-notification-' + Date.now() // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
          })
        );
      } catch (textError) {
      }
    }
  }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
self.addEventListener('notificationclick', function(event) {
  console.log(`[${PUSH_SW_NAME}] –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é! üëÜ`);
  event.notification.close();
  
  // –§–æ–∫—É—Å–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
  event.waitUntil(
    clients.matchAll({type: 'window'})
      .then(function(clientList) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –µ–≥–æ
        if (clientList.length > 0) {
          const url = event.notification.data && event.notification.data.url ? 
            event.notification.data.url : 'https://k-connect.ru';
            
          for (const client of clientList) {
            if ('focus' in client && client.url.includes(self.location.origin)) {
              console.log(`[${PUSH_SW_NAME}] —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ! üéØ`);
              return client.focus().then(client => {
                if (client.url !== url) {
                  console.log(`[${PUSH_SW_NAME}] –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ: ${url} üîó`);
                  return client.navigate(url);
                }
              });
            }
          }
        }
        
        // –ò–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        if (clients.openWindow) {
          const url = event.notification.data && event.notification.data.url ? 
            event.notification.data.url : 'https://k-connect.ru';
          console.log(`[${PUSH_SW_NAME}] –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ: ${url} ü™ü`);
          return clients.openWindow(url);
        }
      })
      .then(() => {
      })
  );
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
self.addEventListener('pushsubscriptionchange', function(event) {
  console.log(`[${PUSH_SW_NAME}] –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—É—à –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä! üîÑ`);
  
  event.waitUntil(
    self.registration.pushManager.subscribe({
      userVisibleOnly: true,
      // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫–ª—é—á, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –≤ NotificationService.js
      applicationServerKey: event.oldSubscription?.options?.applicationServerKey
    })
    .then(subscription => {
      console.log(`[${PUSH_SW_NAME}] —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä! üì°`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      return fetch('/api/notifications/push-subscription', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          endpoint: subscription.endpoint,
          keys: {
            p256dh: subscription.toJSON().keys.p256dh,
            auth: subscription.toJSON().keys.auth
          },
          platform: 'web',
          send_test: false // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        }),
        credentials: 'include'
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }
        return response.json();
      })
      .then(data => {
        console.log(`[${PUSH_SW_NAME}] –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:`, data);
        return data;
      });
    })
    .catch(error => {
      console.error(`[${PUSH_SW_NAME}] –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:`, error);
    })
  );
});