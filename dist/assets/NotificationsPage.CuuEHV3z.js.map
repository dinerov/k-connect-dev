{"version":3,"file":"NotificationsPage.CuuEHV3z.js","sources":["../../src/pages/Info/NotificationsPage.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Container,\r\n  Box,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Divider,\r\n  CircularProgress,\r\n  Paper,\r\n  IconButton,\r\n  Collapse,\r\n  Badge,\r\n} from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { formatTimeAgo } from '../../utils/dateUtils';\r\nimport ExpandLess from '@mui/icons-material/ExpandLess';\r\nimport ExpandMore from '@mui/icons-material/ExpandMore';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport ChatBubbleIcon from '@mui/icons-material/ChatBubble';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\r\n\r\n\r\nconst getNotificationIcon = (type) => {\r\n  switch (type) {\r\n    case 'comment_like':\r\n    case 'reply_like':\r\n    case 'post_like':\r\n      return <FavoriteIcon fontSize=\"small\" color=\"error\" />;\r\n    case 'comment':\r\n      return <ChatBubbleIcon fontSize=\"small\" color=\"primary\" />;\r\n    case 'reply':\r\n      return <ReplyIcon fontSize=\"small\" color=\"primary\" />;\r\n    case 'follow':\r\n      return <PersonAddIcon fontSize=\"small\" color=\"primary\" />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst NotificationGroup = ({ notifications, onNotificationClick }) => {\r\n  const [open, setOpen] = useState(false);\r\n  \r\n  \r\n  if (!Array.isArray(notifications) || notifications.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  const firstNotification = notifications[0];\r\n  if (!firstNotification || typeof firstNotification !== 'object') {\r\n    return null;\r\n  }\r\n  \r\n  const count = notifications.length;\r\n  const hasUnread = notifications.some(n => !n.is_read);\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  \r\n  const senderName = firstNotification.sender_user?.name || 'Пользователь';\r\n  const avatar = firstNotification.sender_user?.avatar_url || \r\n                 (firstNotification.sender_user?.id ? \r\n                  `/static/uploads/avatar/${firstNotification.sender_user.id}/${firstNotification.sender_user.photo || 'avatar.png'}` : \r\n                  '/static/uploads/avatar/system/avatar.png');\r\n\r\n  return (\r\n    <Paper \r\n      elevation={1} \r\n      sx={{ \r\n        mb: 2, \r\n        overflow: 'hidden',\r\n        bgcolor: hasUnread ? 'rgba(140, 82, 255, 0.03)' : 'background.paper',\r\n        border: hasUnread ? '1px solid rgba(140, 82, 255, 0.1)' : '1px solid rgba(255, 255, 255, 0.1)'\r\n      }}\r\n    >\r\n      <ListItem \r\n        button \r\n        onClick={handleClick}\r\n        sx={{\r\n          py: 1.5,\r\n          '&:hover': {\r\n            bgcolor: 'rgba(255, 255, 255, 0.05)'\r\n          }\r\n        }}\r\n      >\r\n        <ListItemAvatar>\r\n          <Avatar \r\n            src={avatar}\r\n            alt={senderName}\r\n            sx={{ width: 40, height: 40 }}\r\n            onError={(e) => {\r\n              \r\n              if (e.currentTarget) {\r\n                e.currentTarget.src = '/static/uploads/avatar/system/avatar.png';\r\n              }\r\n            }}\r\n          >\r\n            {senderName && senderName[0]}\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          primary={\r\n            <Typography variant=\"subtitle2\">\r\n              {senderName}\r\n            </Typography>\r\n          }\r\n          secondary={\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {count > 1 ? `${count} уведомлений` : (firstNotification.message || 'Новое уведомление')}\r\n            </Typography>\r\n          }\r\n        />\r\n        {count > 1 && (open ? <ExpandLess /> : <ExpandMore />)}\r\n      </ListItem>\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          {notifications.map((notification, index) => (\r\n            <React.Fragment key={notification.id || index}>\r\n              <ListItem \r\n                button \r\n                sx={{ \r\n                  pl: 4,\r\n                  py: 1.5,\r\n                  bgcolor: notification.is_read ? 'transparent' : 'rgba(140, 82, 255, 0.05)'\r\n                }}\r\n                onClick={() => onNotificationClick(notification)}\r\n              >\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mr: 1 }}>\r\n                  {getNotificationIcon(notification.type)}\r\n                </Box>\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography variant=\"body2\">\r\n                      {notification.message || 'Новое уведомление'}\r\n                    </Typography>\r\n                  }\r\n                  secondary={\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      {notification.created_at ? formatTimeAgo(notification.created_at) : 'Только что'}\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </ListItem>\r\n              {index < notifications.length - 1 && <Divider component=\"li\" />}\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Collapse>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst NotificationsPage = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchNotifications = async () => {\r\n      try {\r\n        console.log(\"Fetching notifications...\");\r\n        const response = await axios.get('/api/notifications');\r\n        console.log(\"Notifications API response:\", response.data);\r\n        \r\n        if (response.data && Array.isArray(response.data.notifications)) {\r\n          setNotifications(response.data.notifications);\r\n          setUnreadCount(response.data.unread_count || 0);\r\n          console.log(`Loaded ${response.data.notifications.length} notifications`);\r\n        } else {\r\n          console.warn(\"Invalid notifications data format:\", response.data);\r\n          setNotifications([]);\r\n          setUnreadCount(0);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching notifications:', error);\r\n        setNotifications([]);\r\n        setUnreadCount(0);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchNotifications();\r\n    \r\n    const interval = setInterval(fetchNotifications, 90000); \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleNotificationClick = async (notification) => {\r\n    if (!notification || !notification.id) return;\r\n    \r\n    try {\r\n      console.log('Marking notification as read:', notification.id);\r\n      await axios.post(`/api/notifications/${notification.id}/read`);\r\n      \r\n      setNotifications(prev => \r\n        prev.map(n => n.id === notification.id ? { ...n, is_read: true } : n)\r\n      );\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n      \r\n      if (notification.link) {\r\n        navigate(notification.link);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  \r\n  const groupedNotifications = useMemo(() => {\r\n    console.log(\"Grouping notifications:\", notifications);\r\n    \r\n    \r\n    const validNotifications = notifications.filter(\r\n      notification => notification && notification.sender_user && notification.sender_user.id\r\n    );\r\n    \r\n    \r\n    return validNotifications.reduce((acc, notification) => {\r\n      const key = notification.sender_user.id;\r\n      \r\n      if (!acc[key]) {\r\n        acc[key] = [];\r\n      }\r\n      \r\n      acc[key].push(notification);\r\n      return acc;\r\n    }, {});\r\n  }, [notifications]);\r\n\r\n  \r\n  const notificationGroups = useMemo(() => {\r\n    return Object.values(groupedNotifications);\r\n  }, [groupedNotifications]);\r\n\r\n  return (\r\n    <Container \r\n      maxWidth=\"md\" \r\n      sx={{ \r\n        pt: 3,\r\n        pb: 4,\r\n        minHeight: 'calc(100vh - 64px)'\r\n      }}\r\n    >\r\n      <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 2 }}>\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          Уведомления\r\n        </Typography>\r\n        {unreadCount > 0 && (\r\n          <Badge \r\n            badgeContent={unreadCount} \r\n            color=\"error\"\r\n            sx={{ \r\n              '& .MuiBadge-badge': {\r\n                fontSize: '0.8rem',\r\n                height: '22px',\r\n                minWidth: '22px'\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n      </Box>\r\n\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : notificationGroups.length > 0 ? (\r\n        <List sx={{ p: 0 }}>\r\n          {notificationGroups.map((group, index) => (\r\n            <NotificationGroup \r\n              key={group[0].sender_user.id || index}\r\n              notifications={group}\r\n              onNotificationClick={handleNotificationClick}\r\n            />\r\n          ))}\r\n        </List>\r\n      ) : (\r\n        <Paper \r\n          sx={{ \r\n            p: 4, \r\n            textAlign: 'center',\r\n            borderRadius: 2,\r\n            bgcolor: 'background.paper'\r\n          }}\r\n        >\r\n          <Typography color=\"text.secondary\">\r\n            У вас пока нет уведомлений\r\n          </Typography>\r\n        </Paper>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default NotificationsPage; "],"names":["getNotificationIcon","type","jsx","FavoriteIcon","fontSize","color","ChatBubbleIcon","ReplyIcon","PersonAddIcon","NotificationGroup","notifications","onNotificationClick","open","setOpen","useState","Array","isArray","length","firstNotification","count","hasUnread","some","n","is_read","senderName","sender_user","name","avatar","avatar_url","id","photo","jsxs","Paper","elevation","sx","mb","overflow","bgcolor","border","children","ListItem","button","onClick","handleClick","py","ListItemAvatar","Avatar","src","alt","width","height","onError","e","currentTarget","ListItemText","primary","Typography","variant","secondary","message","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","map","notification","index","React","Fragment","pl","Box","display","alignItems","mr","created_at","formatTimeAgo","Divider","NotificationsPage","setNotifications","loading","setLoading","unreadCount","setUnreadCount","navigate","useNavigate","useEffect","fetchNotifications","async","response","axios","get","data","unread_count","error","interval","setInterval","clearInterval","handleNotificationClick","post","prev","Math","max","link","groupedNotifications","useMemo","filter","reduce","acc","key","push","notificationGroups","Object","values","Container","maxWidth","pt","pb","minHeight","gap","Badge","badgeContent","minWidth","justifyContent","CircularProgress","p","group","textAlign","borderRadius"],"mappings":"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"}