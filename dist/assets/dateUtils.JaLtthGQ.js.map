{"version":3,"file":"dateUtils.JaLtthGQ.js","sources":["../../src/utils/dateUtils.js"],"sourcesContent":["/**\n * Utility functions for date and time formatting with timezone support\n * \n * TODO: There are duplicate date formatting functions in formatters.js that should be\n * consolidated with these functions to maintain consistency throughout the application.\n * The formatters in this file provide better timezone handling and should be preferred.\n */\n\n\nexport const getLocalTimezoneOffset = () => {\n  return new Date().getTimezoneOffset();\n};\n\n\nexport const getMoscowTimezoneOffset = () => {\n  return -180; \n};\n\n\nexport const getUserTimezoneName = () => {\n  return Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\n/**\n * Parses a date string consistently handling UTC and timezones\n * @param {string} dateString - The date string to parse\n * @returns {Date} - A properly parsed Date object\n */\nexport const parseDate = (dateString) => {\n  if (!dateString) return new Date();\n  \n  \n  console.log(`Parsing date string: \"${dateString}\"`);\n  \n  \n  if (dateString.endsWith('Z')) {\n    console.log('  ✓ String has Z suffix, parsing as UTC');\n    return new Date(dateString);\n  } \n  \n  else if (dateString.includes('T') && !dateString.includes('Z')) {\n    console.log('  ✓ String is ISO format but missing Z, adding Z suffix');\n    \n    return new Date(dateString + 'Z');\n  } \n  \n  else {\n    console.log('  ✓ String format uncertain, parsing as-is');\n    return new Date(dateString);\n  }\n};\n\n/**\n * Утилита для отладки парсинга даты\n * @param {string} dateString - Строка даты для проверки\n * @returns {Object} - Информация о том, как парсится дата\n */\nexport const debugDate = (dateString) => {\n  const standardParse = new Date(dateString);\n  const utcParse = new Date(dateString + 'Z');\n  const now = new Date();\n  \n  return {\n    originalString: dateString,\n    standardParseResult: standardParse.toString(),\n    standardParseISO: standardParse.toISOString(),\n    utcParseResult: utcParse.toString(),\n    utcParseISO: utcParse.toISOString(),\n    currentTime: now.toString(),\n    currentTimeISO: now.toISOString(),\n    diffStandard: Math.floor((now - standardParse) / 1000) + ' seconds',\n    diffUTC: Math.floor((now - utcParse) / 1000) + ' seconds',\n    userTimezone: getUserTimezoneName(),\n    timezoneOffset: getLocalTimezoneOffset() + ' minutes'\n  };\n};\n\n\nexport const formatTimeAgo = (dateString) => {\n  if (!dateString) return '';\n  \n  const date = parseDate(dateString);\n  const now = new Date();\n  \n  \n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  \n  return formatTimeAgoDiff(diffInSeconds);\n};\n\n\nconst formatTimeAgoDiff = (diffInSeconds) => {\n  if (diffInSeconds < 0) {\n    \n    return 'только что';\n  } else if (diffInSeconds < 60) {\n    return 'только что';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes} ${getRussianWordForm(minutes, ['минуту', 'минуты', 'минут'])} назад`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours} ${getRussianWordForm(hours, ['час', 'часа', 'часов'])} назад`;\n  } else if (diffInSeconds < 2592000) {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days} ${getRussianWordForm(days, ['день', 'дня', 'дней'])} назад`;\n  } else if (diffInSeconds < 31536000) {\n    const months = Math.floor(diffInSeconds / 2592000);\n    return `${months} ${getRussianWordForm(months, ['месяц', 'месяца', 'месяцев'])} назад`;\n  } else {\n    const years = Math.floor(diffInSeconds / 31536000);\n    return `${years} ${getRussianWordForm(years, ['год', 'года', 'лет'])} назад`;\n  }\n};\n\n\nexport const formatDate = (dateString) => {\n  if (!dateString) return '';\n  \n  const date = parseDate(dateString);\n  \n  \n  return new Intl.DateTimeFormat(navigator.language || 'ru-RU', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    timeZone: getUserTimezoneName() \n  }).format(date);\n};\n\n\nexport const formatDateTimeShort = (dateString) => {\n  if (!dateString) return '';\n  \n  const date = parseDate(dateString);\n  \n  return new Intl.DateTimeFormat(navigator.language || 'ru-RU', {\n    day: 'numeric',\n    month: 'short',\n    hour: '2-digit',\n    minute: '2-digit',\n    timeZone: getUserTimezoneName()\n  }).format(date);\n};\n\n\nexport const getRussianWordForm = (number, forms) => {\n  const cases = [2, 0, 1, 1, 1, 2];\n  const mod100 = number % 100;\n  const mod10 = number % 10;\n  return forms[(mod100 > 4 && mod100 < 20) ? 2 : cases[(mod10 < 5) ? mod10 : 5]];\n}; "],"names":["getUserTimezoneName","Intl","DateTimeFormat","resolvedOptions","timeZone","parseDate","dateString","endsWith","Date","includes","formatTimeAgo","date","now","diffInSeconds","Math","floor","getTime","formatTimeAgoDiff","minutes","getRussianWordForm","hours","days","months","years","formatDate","navigator","language","day","month","year","hour","minute","format","formatDateTimeShort","number","forms","mod100","mod10"],"mappings":"AAmBO,MAAMA,EAAsBA,IAC1BC,KAAKC,iBAAiBC,kBAAkBC,SAQpCC,EAA4BC,GAClCA,EAMDA,EAAWC,SAAS,KAEf,IAAIC,KAAKF,GAGTA,EAAWG,SAAS,OAASH,EAAWG,SAAS,KAGjD,IAAID,KAAKF,EAAa,KAKtB,IAAIE,KAAKF,GAnBM,IAAIE,KAiDjBE,EAAgCJ,IACvC,IAACA,EAAmB,MAAA,GAElBK,MAAAA,EAAON,EAAUC,GACjBM,MAAUJ,KAGVK,EAAgBC,KAAKC,OAAOH,EAAII,UAAYL,EAAKK,WAAa,KAEpE,OAAOC,EAAkBJ,IAIrBI,EAAuCJ,IAC3C,GAAIA,EAAgB,EAEX,MAAA,aACT,GAAWA,EAAgB,GAClB,MAAA,aACT,GAAWA,EAAgB,KAAM,CAC/B,MAAMK,EAAUJ,KAAKC,MAAMF,EAAgB,IACpC,MAAA,GAAGK,KAAWC,EAAmBD,EAAS,CAAC,SAAU,SAAU,iBAAS,CACjF,GAAWL,EAAgB,MAAO,CAChC,MAAMO,EAAQN,KAAKC,MAAMF,EAAgB,MAClC,MAAA,GAAGO,KAASD,EAAmBC,EAAO,CAAC,MAAO,OAAQ,iBAAS,CACxE,GAAWP,EAAgB,OAAS,CAClC,MAAMQ,EAAOP,KAAKC,MAAMF,EAAgB,OACjC,MAAA,GAAGQ,KAAQF,EAAmBE,EAAM,CAAC,OAAQ,MAAO,gBAAQ,CACrE,GAAWR,EAAgB,QAAU,CACnC,MAAMS,EAASR,KAAKC,MAAMF,EAAgB,QACnC,MAAA,GAAGS,KAAUH,EAAmBG,EAAQ,CAAC,QAAS,SAAU,mBAAW,CACzE,CACL,MAAMC,EAAQT,KAAKC,MAAMF,EAAgB,SAClC,MAAA,GAAGU,KAASJ,EAAmBI,EAAO,CAAC,MAAO,OAAQ,eAAO,GAK3DC,EAA6BlB,IACpC,IAACA,EAAmB,MAAA,GAElBK,MAAAA,EAAON,EAAUC,GAGvB,OAAO,IAAIL,KAAKC,eAAeuB,UAAUC,UAAY,QAAS,CAC5DC,IAAK,UACLC,MAAO,OACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACR3B,SAAUJ,MACTgC,OAAOrB,IAICsB,EAAsC3B,IAC7C,IAACA,EAAmB,MAAA,GAElBK,MAAAA,EAAON,EAAUC,GAEvB,OAAO,IAAIL,KAAKC,eAAeuB,UAAUC,UAAY,QAAS,CAC5DC,IAAK,UACLC,MAAO,QACPE,KAAM,UACNC,OAAQ,UACR3B,SAAUJ,MACTgC,OAAOrB,IAICQ,EAAqBA,CAACe,EAAQC,KACzC,MACMC,EAASF,EAAS,IAClBG,EAAQH,EAAS,GAChBC,OAAAA,EAAOC,EAAS,GAAKA,EAAS,GAAM,EAH7B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAGwBC,EAAQ,EAAKA,EAAQ"}