{"version":3,"file":"AdminPage.AIuATBTk.js","sources":["../../node_modules/@mui/icons-material/ListAlt.js","../../node_modules/@mui/icons-material/ModeEdit.js","../../src/pages/Admin/AdminPage.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 5v14H5V5zm1.1-2H3.9c-.5 0-.9.4-.9.9v16.2c0 .4.4.9.9.9h16.2c.4 0 .9-.5.9-.9V3.9c0-.5-.5-.9-.9-.9M11 7h6v2h-6zm0 4h6v2h-6zm0 4h6v2h-6zM7 7h2v2H7zm0 4h2v2H7zm0 4h2v2H7z\"\n}), 'ListAlt');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'ModeEdit');","import React, { useState, useEffect, useContext } from 'react';\nimport { \n  Container, \n  Box, \n  Paper, \n  Typography, \n  TextField, \n  Button, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow,\n  Tab,\n  Tabs,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Avatar,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  CircularProgress,\n  Alert,\n  Snackbar,\n  TablePagination,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Divider,\n  FormControlLabel,\n  Checkbox,\n  Switch,\n  Pagination\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\nimport AdminPanelSettingsIcon from '@mui/icons-material/AdminPanelSettings';\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\nimport BlockIcon from '@mui/icons-material/Block';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport VerifiedUserIcon from '@mui/icons-material/VerifiedUser';\nimport SearchIcon from '@mui/icons-material/Search';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport PeopleIcon from '@mui/icons-material/People';\nimport PostAddIcon from '@mui/icons-material/PostAdd';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport MusicNoteIcon from '@mui/icons-material/MusicNote';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SecurityIcon from '@mui/icons-material/Security';\nimport ListAltIcon from '@mui/icons-material/ListAlt';\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport PhotoIcon from '@mui/icons-material/Photo';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport BadgeIcon from '@mui/icons-material/Badge';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport DoneIcon from '@mui/icons-material/Done';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport ManageAccountsIcon from '@mui/icons-material/ManageAccounts';\nimport KeyIcon from '@mui/icons-material/Key';\nimport VpnKeyIcon from '@mui/icons-material/VpnKey';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\nimport axios from 'axios';\nimport { Icon } from '@iconify/react';\n\n\nconst PageHeader = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  marginBottom: theme.spacing(3),\n  padding: theme.spacing(2, 0),\n}));\n\nconst ContentPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(3),\n  marginBottom: theme.spacing(3),\n  borderRadius: theme.shape.borderRadius * 2,\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',\n}));\n\nconst SearchContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  marginBottom: theme.spacing(3),\n  gap: theme.spacing(2),\n}));\n\nconst AdminPage = () => {\n  const { user } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const [tabValue, setTabValue] = useState(0);\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [tracks, setTracks] = useState([]);\n  const [achievements, setAchievements] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [userPosts, setUserPosts] = useState([]);\n  const [userTracks, setUserTracks] = useState([]);\n  \n  \n  const [verifyDialogOpen, setVerifyDialogOpen] = useState(false);\n  const [badgeDialogOpen, setBadgeDialogOpen] = useState(false);\n  const [banDialogOpen, setBanDialogOpen] = useState(false);\n  const [deletePostDialogOpen, setDeletePostDialogOpen] = useState(false);\n  const [deleteTrackDialogOpen, setDeleteTrackDialogOpen] = useState(false);\n  const [viewUserDialogOpen, setViewUserDialogOpen] = useState(false);\n  const [moderatorDialogOpen, setModeratorDialogOpen] = useState(false);\n  \n  \n  const [verificationLevel, setVerificationLevel] = useState(1);\n  const [selectedBadge, setSelectedBadge] = useState('');\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [selectedTrack, setSelectedTrack] = useState(null);\n  const [banReason, setBanReason] = useState('');\n  \n  \n  const [selectedPermissions, setSelectedPermissions] = useState({\n    delete_music: false,\n    delete_posts: false,\n    delete_avatar: false,\n    delete_comments: false,\n    change_user_name: false,\n    change_username: false,\n    manage_bug_reports: false,\n    delete_bug_reports: false\n  });\n  const [moderators, setModerators] = useState([]);\n  const [bugReports, setBugReports] = useState([]);\n  \n  \n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  \n  \n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  \n  \n  const [openKeyGenerationDialog, setOpenKeyGenerationDialog] = useState(false);\n  const [generatedKeys, setGeneratedKeys] = useState([]);\n  const [keyGenerationParams, setKeyGenerationParams] = useState({\n    type: 'points',\n    points: 1000,\n    subscription_type: 'basic',\n    subscription_duration_days: 30,\n    max_uses: 1,\n    count: 1,\n    description: '',\n    expires_days: 30\n  });\n  const [isGeneratingKeys, setIsGeneratingKeys] = useState(false);\n  const [redemptionKeys, setRedemptionKeys] = useState([]);\n  const [keysLoading, setKeysLoading] = useState(false);\n  const [keysPagination, setKeysPagination] = useState({\n    page: 1,\n    per_page: 10,\n    total: 0,\n    pages: 0\n  });\n  \n  \n  if (!user || user.id !== 3) {\n    return <Navigate to=\"/\" />;\n  }\n  \n  useEffect(() => {\n    fetchUsers();\n    fetchAllAchievements();\n    fetchModerators();\n    fetchBugReports();\n  }, []);\n  \n  useEffect(() => {\n    \n    if (tabValue === 1) {\n      fetchAllPosts();\n    } else if (tabValue === 2) {\n      fetchAllTracks();\n    } else if (tabValue === 6) { \n      fetchRedemptionKeys();\n    }\n  }, [tabValue]);\n  \n  \n  const fetchAllPosts = async () => {\n    try {\n      setLoading(true);\n      \n      const response = await axios.get('/api/posts/feed?limit=50');\n      if (response.data && response.data.posts) {\n        setUserPosts(response.data.posts);\n      }\n    } catch (error) {\n      console.error('Error fetching all posts:', error);\n      showNotification('error', 'Не удалось загрузить посты');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const fetchAllTracks = async () => {\n    try {\n      setLoading(true);\n      \n      const response = await axios.get('/api/music');\n      if (response.data && response.data.tracks) {\n        setUserTracks(response.data.tracks);\n      }\n    } catch (error) {\n      console.error('Error fetching all tracks:', error);\n      showNotification('error', 'Не удалось загрузить треки');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      let url = '/api/admin/users';\n      if (searchQuery) {\n        url += `?search=${searchQuery}`;\n      }\n      \n      const response = await axios.get(url);\n      setUsers(response.data.users || []);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      showNotification('error', 'Не удалось загрузить пользователей');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const fetchAllAchievements = async () => {\n    try {\n      const response = await axios.get('/api/admin/badge-types');\n      setAchievements(response.data.badge_types || []);\n    } catch (error) {\n      console.error('Error fetching badges:', error);\n      showNotification('error', 'Не удалось загрузить доступные значки');\n    }\n  };\n  \n  \n  const fetchUserPosts = async (userId) => {\n    try {\n      const response = await axios.get(`/api/admin/users/${userId}/posts`);\n      setUserPosts(response.data.posts || []);\n    } catch (error) {\n      console.error('Error fetching user posts:', error);\n      showNotification('error', 'Не удалось загрузить посты пользователя');\n    }\n  };\n  \n  \n  const fetchUserTracks = async (userId) => {\n    try {\n      const response = await axios.get(`/api/admin/users/${userId}/tracks`);\n      setUserTracks(response.data.tracks || []);\n    } catch (error) {\n      console.error('Error fetching user tracks:', error);\n      showNotification('error', 'Не удалось загрузить треки пользователя');\n    }\n  };\n  \n  \n  const fetchModerators = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/admin/moderators');\n      setModerators(response.data.moderators || []);\n    } catch (error) {\n      console.error('Error fetching moderators:', error);\n      showNotification('error', 'Не удалось загрузить модераторов');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const fetchBugReports = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/admin/bug-reports');\n      setBugReports(response.data.bug_reports || []);\n    } catch (error) {\n      console.error('Error fetching bug reports:', error);\n      showNotification('error', 'Не удалось загрузить баг-репорты');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const showNotification = (severity, message) => {\n    setNotification({\n      open: true,\n      message,\n      severity: severity\n    });\n  };\n  \n  \n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  \n  \n  const handleSearch = () => {\n    fetchUsers();\n  };\n  \n  \n  const handleVerifyUser = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`/api/admin/users/${selectedUser.id}/verify`, {\n        verification_level: verificationLevel\n      });\n      \n      if (response.data.success) {\n        showNotification('success', 'Статус верификации пользователя обновлен');\n        \n        setUsers(users.map(u => \n          u.id === selectedUser.id \n            ? { ...u, verification_status: response.data.verification_status, verification_level: verificationLevel } \n            : u\n        ));\n      } else {\n        throw new Error(response.data.error || 'Failed to verify user');\n      }\n    } catch (error) {\n      console.error('Error verifying user:', error);\n      showNotification('error', 'Не удалось обновить статус верификации');\n    } finally {\n      setLoading(false);\n      setVerifyDialogOpen(false);\n    }\n  };\n  \n  \n  const handleGiveBadge = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`/api/admin/users/${selectedUser.id}/give-achievement`, {\n        badge_type_id: selectedBadge\n      });\n      \n      if (response.data.success) {\n        showNotification('success', 'Достижение успешно выдано пользователю');\n        \n        fetchUsers();\n      } else {\n        throw new Error(response.data.error || 'Failed to give achievement');\n      }\n    } catch (error) {\n      console.error('Error giving badge:', error);\n      showNotification('error', 'Не удалось выдать достижение');\n    } finally {\n      setLoading(false);\n      setBadgeDialogOpen(false);\n    }\n  };\n  \n  \n  const handleBanUser = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`/api/admin/users/${selectedUser.id}/ban`, {\n        reason: banReason,\n        is_banned: !selectedUser.is_banned \n      });\n      \n      if (response.data.success) {\n        showNotification('success', selectedUser.is_banned ? 'Пользователь разблокирован' : 'Пользователь заблокирован');\n        \n        setUsers(users.map(u => \n          u.id === selectedUser.id \n            ? { ...u, is_banned: !u.is_banned } \n            : u\n        ));\n      } else {\n        throw new Error(response.data.error || 'Failed to update ban status');\n      }\n    } catch (error) {\n      console.error('Error banning user:', error);\n      showNotification('error', 'Не удалось изменить статус блокировки');\n    } finally {\n      setLoading(false);\n      setBanDialogOpen(false);\n    }\n  };\n  \n  \n  const handleDeletePost = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.delete(`/api/admin/posts/${selectedPost.id}`);\n      \n      if (response.data.success) {\n        showNotification('success', 'Пост успешно удален');\n        \n        setUserPosts(userPosts.filter(p => p.id !== selectedPost.id));\n      } else {\n        throw new Error(response.data.error || 'Failed to delete post');\n      }\n    } catch (error) {\n      console.error('Error deleting post:', error);\n      showNotification('error', 'Не удалось удалить пост');\n    } finally {\n      setLoading(false);\n      setDeletePostDialogOpen(false);\n    }\n  };\n  \n  const handleViewUser = (user) => {\n    setSelectedUser(user);\n    fetchUserPosts(user.id);\n    fetchUserTracks(user.id);\n    setViewUserDialogOpen(true);\n  };\n  \n  \n  const openVerifyDialog = (user) => {\n    setSelectedUser(user);\n    setVerificationLevel(user.verification_level || 1);\n    setVerifyDialogOpen(true);\n  };\n  \n  \n  const openBadgeDialog = (user) => {\n    setSelectedUser(user);\n    setSelectedBadge('');\n    setBadgeDialogOpen(true);\n  };\n  \n  \n  const openBanDialog = (user) => {\n    setSelectedUser(user);\n    setBanReason('');\n    setBanDialogOpen(true);\n  };\n  \n  \n  const openDeletePostDialog = (post) => {\n    setSelectedPost(post);\n    setDeletePostDialogOpen(true);\n  };\n  \n  \n  const handleDeleteTrack = async (trackId) => {\n    try {\n      setLoading(true);\n      const response = await axios.delete(`/api/admin/tracks/${trackId}`);\n      \n      if (response.data.success) {\n        showNotification('success', 'Трек успешно удален');\n        \n        setUserTracks(userTracks.filter(track => track.id !== trackId));\n      } else {\n        throw new Error(response.data.error || 'Не удалось удалить трек');\n      }\n    } catch (error) {\n      console.error('Error deleting track:', error);\n      showNotification('error', 'Не удалось удалить трек');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const openDeleteTrackDialog = (track) => {\n    setSelectedTrack(track);\n    setDeleteTrackDialogOpen(true);\n  };\n  \n  \n  const confirmDeleteTrack = () => {\n    if (selectedTrack) {\n      handleDeleteTrack(selectedTrack.id);\n      setDeleteTrackDialogOpen(false);\n    }\n  };\n  \n  \n  const handleToggleModeratorStatus = async () => {\n    try {\n      setLoading(true);\n      const isCurrentlyModerator = isModerator(selectedUser.id);\n      \n      let response;\n      if (isCurrentlyModerator) {\n        \n        response = await axios.delete(`/api/admin/moderators/${selectedUser.id}`);\n        if (response.data.success) {\n          showNotification('success', 'Модераторские права отозваны');\n          setModerators(moderators.filter(mod => mod.user_id !== selectedUser.id));\n        }\n      } else {\n        \n        response = await axios.post('/api/admin/moderators', {\n          user_id: selectedUser.id,\n          permissions: selectedPermissions\n        });\n        \n        if (response.data.success) {\n          showNotification('success', 'Пользователь назначен модератором');\n          \n          setModerators([...moderators, {\n            user_id: selectedUser.id,\n            user_name: selectedUser.name,\n            user_username: selectedUser.username,\n            permissions: selectedPermissions\n          }]);\n        }\n      }\n    } catch (error) {\n      console.error('Error updating moderator status:', error);\n      showNotification('error', 'Не удалось обновить статус модератора');\n    } finally {\n      setLoading(false);\n      setModeratorDialogOpen(false);\n    }\n  };\n  \n  \n  const handleUpdateModeratorPermissions = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.put(`/api/admin/moderators/${selectedUser.id}`, {\n        permissions: selectedPermissions\n      });\n      \n      if (response.data.success) {\n        showNotification('success', 'Права модератора обновлены');\n        \n        setModerators(moderators.map(mod => \n          mod.user_id === selectedUser.id \n            ? { ...mod, permissions: selectedPermissions } \n            : mod\n        ));\n      }\n    } catch (error) {\n      console.error('Error updating moderator permissions:', error);\n      showNotification('error', 'Не удалось обновить права модератора');\n    } finally {\n      setLoading(false);\n      setModeratorDialogOpen(false);\n    }\n  };\n  \n  \n  const openModeratorDialog = (user) => {\n    setSelectedUser(user);\n    \n    \n    const existingModerator = moderators.find(mod => mod.user_id === user.id);\n    \n    if (existingModerator) {\n      \n      setSelectedPermissions(existingModerator.permissions);\n    } else {\n      \n      setSelectedPermissions({\n        delete_music: false,\n        delete_posts: false,\n        delete_avatar: false,\n        delete_comments: false,\n        change_user_name: false,\n        change_username: false,\n        manage_bug_reports: false,\n        delete_bug_reports: false\n      });\n    }\n    \n    setModeratorDialogOpen(true);\n  };\n  \n  \n  const isModerator = (userId) => {\n    return moderators.some(mod => mod.user_id === userId);\n  };\n  \n  \n  const handleUpdateBugReportStatus = async (reportId, status) => {\n    try {\n      setLoading(true);\n      const response = await axios.put(`/api/admin/bug-reports/${reportId}`, {\n        status\n      });\n      \n      if (response.data.success) {\n        showNotification('success', 'Статус баг-репорта обновлен');\n        \n        setBugReports(bugReports.map(report => \n          report.id === reportId \n            ? { ...report, status } \n            : report\n        ));\n      } else {\n        throw new Error(response.data.error || 'Failed to update bug report status');\n      }\n    } catch (error) {\n      console.error('Error updating bug report status:', error);\n      showNotification('error', 'Не удалось обновить статус баг-репорта');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const handleDeleteBugReport = async (reportId) => {\n    try {\n      setLoading(true);\n      const response = await axios.delete(`/api/admin/bug-reports/${reportId}`);\n      \n      if (response.data.success) {\n        showNotification('success', 'Баг-репорт успешно удален');\n        \n        setBugReports(bugReports.filter(report => report.id !== reportId));\n      } else {\n        throw new Error(response.data.error || 'Failed to delete bug report');\n      }\n    } catch (error) {\n      console.error('Error deleting bug report:', error);\n      showNotification('error', 'Не удалось удалить баг-репорт');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const handleAddModerator = async () => {\n    setLoading(true);\n    \n    try {\n      \n      const response = await fetch('/api/admin/moderators', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: selectedUser.id,\n          permissions: {\n            delete_posts: selectedPermissions.delete_posts,\n            delete_music: selectedPermissions.delete_music,\n            delete_comments: selectedPermissions.delete_comments,\n            delete_avatar: selectedPermissions.delete_avatar,\n            change_user_name: selectedPermissions.change_user_name,\n            change_username: selectedPermissions.change_username,\n            manage_bug_reports: selectedPermissions.manage_bug_reports,\n            delete_bug_reports: selectedPermissions.delete_bug_reports,\n          },\n          update_status: selectedPermissions.update_status,\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        console.error('Ошибка при добавлении модератора:', data);\n        \n        \n        let errorMessage = data.error || 'Неизвестная ошибка';\n        \n        \n        if (data.debug_info) {\n          errorMessage += '\\n\\nДетали ошибки:\\n';\n          Object.entries(data.debug_info).forEach(([key, value]) => {\n            if (value) errorMessage += `${key}: ${value}\\n`;\n          });\n        }\n        \n        showNotification('error', errorMessage);\n        setLoading(false);\n        return;\n      }\n\n      \n      showNotification('success', data.message || 'Модератор успешно добавлен');\n      \n      \n      fetchModerators();\n      \n      \n      handleCloseModeratorDialog();\n    } catch (error) {\n      console.error('Ошибка при отправке запроса:', error);\n      showNotification('error', `Произошла ошибка: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  \n  const renderUsersTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>ID</TableCell>\n              <TableCell>Пользователь</TableCell>\n              <TableCell>Email / Telegram ID</TableCell>\n              <TableCell>Статус</TableCell>\n              <TableCell>Действия</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((user) => (\n              <TableRow key={user.id}>\n                <TableCell>{user.id}</TableCell>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <Avatar \n                      src={user.photo ? (user.photo.startsWith('/') ? user.photo : `/static/uploads/avatar/${user.id}/${user.photo}`) : undefined} \n                      sx={{ mr: 1 }}\n                      onError={(e) => {\n                        console.error(`Failed to load avatar for ${user.username}`);\n                        e.target.onerror = null; \n                        e.target.src = `/static/uploads/avatar/system/avatar.png`;\n                      }}\n                    />\n                    <Box>\n                      <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', display: 'flex', alignItems: 'center' }}>\n                        {user.name}\n                        {user.verification_status === 'verified' && (\n                          <CheckCircleIcon \n                            sx={{ \n                              fontSize: 16, \n                              ml: 0.5, \n                              color: user.verification_level === 1 ? '#9e9e9e' : \n                                     user.verification_level === 2 ? '#d67270' : \n                                     user.verification_level === 3 ? '#b39ddb' : \n                                     user.verification_level === 4 ? '#ff9800' : \n                                     user.verification_level === 5 ? '#4caf50' :\n                                     user.verification_level === 6 ? '#1e88e5' :\n                                     user.verification_level === 7 ? '#7c4dff' :\n                                     '#D0BCFF'\n                            }} \n                          />\n                        )}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">@{user.username}</Typography>\n                    </Box>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Box>\n                    {user.email ? (\n                      <Typography variant=\"body2\">{user.email}</Typography>\n                    ) : (\n                      <Typography variant=\"body2\" color=\"text.secondary\">Нет email</Typography>\n                    )}\n                    {user.telegram_id && (\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Telegram ID: {user.telegram_id}\n                      </Typography>\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  {user.is_banned ? (\n                    <Chip size=\"small\" label=\"Заблокирован\" color=\"error\" variant=\"outlined\" />\n                  ) : (\n                    <Chip size=\"small\" label=\"Активен\" color=\"success\" variant=\"outlined\" />\n                  )}\n                </TableCell>\n                <TableCell>\n                  <Box sx={{ display: 'flex', gap: 1 }}>\n                    <IconButton size=\"small\" color=\"primary\" onClick={() => handleViewUser(user)}>\n                      <VisibilityIcon fontSize=\"small\" />\n                    </IconButton>\n                    <IconButton size=\"small\" color=\"primary\" onClick={() => openVerifyDialog(user)}>\n                      <VerifiedUserIcon fontSize=\"small\" />\n                    </IconButton>\n                    <IconButton size=\"small\" color=\"secondary\" onClick={() => openBadgeDialog(user)}>\n                      <EmojiEventsIcon fontSize=\"small\" />\n                    </IconButton>\n                    <IconButton size=\"small\" color={user.is_banned ? \"success\" : \"error\"} onClick={() => openBanDialog(user)}>\n                      <BlockIcon fontSize=\"small\" />\n                    </IconButton>\n                    <IconButton \n                      color={isModerator(user.id) ? \"success\" : \"default\"} \n                      onClick={() => openModeratorDialog(user)}\n                    >\n                      <SecurityIcon fontSize=\"small\" />\n                    </IconButton>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={users.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={(event, newPage) => setPage(newPage)}\n          onRowsPerPageChange={(event) => {\n            setRowsPerPage(parseInt(event.target.value, 10));\n            setPage(0);\n          }}\n        />\n      </TableContainer>\n    );\n  };\n  \n  \n  const renderModeratorsTable = () => {\n  return (\n      <ContentPaper>\n        <Typography variant=\"h6\" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>\n          <SecurityIcon sx={{ mr: 1 }} />\n          Управление модераторами\n        </Typography>\n        \n        <TableContainer component={Paper} sx={{ mb: 3 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>ID</TableCell>\n                <TableCell>Имя</TableCell>\n                <TableCell>Пользователь</TableCell>\n                <TableCell>Права</TableCell>\n                <TableCell>Действия</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {moderators.map((moderator) => (\n                <TableRow key={moderator.user_id}>\n                  <TableCell>{moderator.user_id}</TableCell>\n                  <TableCell>{moderator.user_name}</TableCell>\n                  <TableCell>@{moderator.user_username}</TableCell>\n                  <TableCell>\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {moderator.permissions.delete_music && (\n                        <Chip label=\"Удаление музыки\" size=\"small\" color=\"info\" />\n                      )}\n                      {moderator.permissions.delete_posts && (\n                        <Chip label=\"Удаление постов\" size=\"small\" color=\"info\" />\n                      )}\n                      {moderator.permissions.delete_avatar && (\n                        <Chip label=\"Удаление аватаров\" size=\"small\" color=\"info\" />\n                      )}\n                      {moderator.permissions.delete_comments && (\n                        <Chip label=\"Удаление комментариев\" size=\"small\" color=\"info\" />\n                      )}\n                      {moderator.permissions.change_user_name && (\n                        <Chip label=\"Изменение имени\" size=\"small\" color=\"info\" />\n                      )}\n                      {moderator.permissions.change_username && (\n                        <Chip label=\"Изменение username\" size=\"small\" color=\"info\" />\n                      )}\n                      {moderator.permissions.manage_bug_reports && (\n                        <Chip label=\"Управление баг-репортами\" size=\"small\" color=\"info\" />\n                      )}\n                      {moderator.permissions.delete_bug_reports && (\n                        <Chip label=\"Удаление баг-репортов\" size=\"small\" color=\"info\" />\n                      )}\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Box sx={{ display: 'flex' }}>\n                      <IconButton \n                        color=\"primary\" \n                        onClick={() => {\n                          const user = users.find(u => u.id === moderator.user_id) || {\n                            id: moderator.user_id,\n                            name: moderator.user_name,\n                            username: moderator.user_username\n                          };\n                          openModeratorDialog(user);\n                        }}\n                      >\n                        <ModeEditIcon />\n                      </IconButton>\n                      <IconButton \n                        color=\"error\" \n                        onClick={() => {\n                          const user = users.find(u => u.id === moderator.user_id) || {\n                            id: moderator.user_id,\n                            name: moderator.user_name,\n                            username: moderator.user_username\n                          };\n                          setSelectedUser(user);\n                          handleToggleModeratorStatus();\n                        }}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ))}\n              {moderators.length === 0 && (\n                <TableRow>\n                  <TableCell colSpan={5} align=\"center\">\n                    Нет модераторов\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        \n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          Для назначения пользователя модератором, найдите его в списке пользователей и нажмите иконку <SecurityIcon fontSize=\"small\" sx={{ verticalAlign: 'middle' }} />\n        </Typography>\n      </ContentPaper>\n    );\n  };\n  \n  \n  const renderBugReportsTable = () => {\n    return (\n      <ContentPaper>\n        <Typography variant=\"h6\" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>\n          <BugReportIcon sx={{ mr: 1 }} />\n          Управление баг-репортами\n        </Typography>\n        \n        <TableContainer component={Paper} sx={{ mb: 3 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>ID</TableCell>\n                <TableCell>Пользователь</TableCell>\n                <TableCell>Заголовок</TableCell>\n                <TableCell>Описание</TableCell>\n                <TableCell>Статус</TableCell>\n                <TableCell>Дата</TableCell>\n                <TableCell>Действия</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {bugReports.map((report) => (\n                <TableRow key={report.id}>\n                  <TableCell>{report.id}</TableCell>\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Avatar \n                        src={report.user_photo ? \n                          (report.user_photo.startsWith('/') ? report.user_photo : `/static/uploads/avatar/${report.user_id}/${report.user_photo}`) \n                          : undefined} \n                        sx={{ mr: 1, width: 24, height: 24 }}\n                      />\n                      <Typography variant=\"body2\">{report.user_name}</Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\">{report.title}</Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography \n                      variant=\"body2\" \n                      sx={{ \n                        maxWidth: 200, \n                        overflow: 'hidden', \n                        textOverflow: 'ellipsis', \n                        whiteSpace: 'nowrap' \n                      }}\n                    >\n                      {report.description}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Chip \n                      label={\n                        report.status === 'new' ? 'Новый' :\n                        report.status === 'in_progress' ? 'В работе' :\n                        report.status === 'fixed' ? 'Исправлен' :\n                        report.status === 'wont_fix' ? 'Не будет исправлен' :\n                        'Неизвестно'\n                      }\n                      color={\n                        report.status === 'new' ? 'info' :\n                        report.status === 'in_progress' ? 'warning' :\n                        report.status === 'fixed' ? 'success' :\n                        report.status === 'wont_fix' ? 'error' :\n                        'default'\n                      }\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {new Date(report.created_at).toLocaleDateString()}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Box sx={{ display: 'flex' }}>\n                      <FormControl variant=\"standard\" sx={{ minWidth: 120, mr: 1 }}>\n                        <Select\n                          value={report.status}\n                          onChange={(e) => handleUpdateBugReportStatus(report.id, e.target.value)}\n                          size=\"small\"\n                        >\n                          <MenuItem value=\"new\">Новый</MenuItem>\n                          <MenuItem value=\"in_progress\">В работе</MenuItem>\n                          <MenuItem value=\"fixed\">Исправлен</MenuItem>\n                          <MenuItem value=\"wont_fix\">Не будет исправлен</MenuItem>\n                        </Select>\n                      </FormControl>\n                      \n                      <IconButton \n                        color=\"error\" \n                        onClick={() => handleDeleteBugReport(report.id)}\n                        size=\"small\"\n                      >\n                        <DeleteIcon fontSize=\"small\" />\n                      </IconButton>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ContentPaper>\n    );\n  };\n  \n  \n  const handleGenerateKeys = async () => {\n    try {\n      setIsGeneratingKeys(true);\n      \n      // Проверка параметров в зависимости от типа ключа\n      if (keyGenerationParams.type === 'points') {\n        if (keyGenerationParams.points <= 0) {\n          showNotification('error', 'Количество баллов должно быть больше нуля');\n          return;\n        }\n      } else if (keyGenerationParams.type === 'subscription') {\n        if (keyGenerationParams.subscription_duration_days <= 0) {\n          showNotification('error', 'Срок действия подписки должен быть больше нуля');\n          return;\n        }\n      }\n\n      // Добавляем логирование параметров\n      console.log('Отправляемые параметры:', keyGenerationParams);\n      \n      const response = await axios.post(`/api/admin/users/${user.id}/generate-keys`, keyGenerationParams);\n      \n      // Логируем ответ от сервера\n      console.log('Ответ сервера:', response.data);\n      \n      if (response.data.success) {\n        setGeneratedKeys(response.data.keys);\n        showNotification('success', `Успешно сгенерировано ${response.data.keys.length} ключей`);\n        fetchRedemptionKeys(); \n      } else {\n        showNotification('error', response.data.error || 'Ошибка при генерации ключей');\n      }\n    } catch (error) {\n      console.error('Error generating keys:', error);\n      showNotification('error', error.response?.data?.error || 'Произошла ошибка при генерации ключей');\n    } finally {\n      setIsGeneratingKeys(false);\n    }\n  };\n  \n  \n  const copyKeysToClipboard = () => {\n    if (generatedKeys.length > 0) {\n      const keyText = generatedKeys.join('\\n');\n      navigator.clipboard.writeText(keyText)\n        .then(() => {\n          showNotification('success', 'Ключи скопированы в буфер обмена');\n        })\n        .catch(err => {\n          console.error('Failed to copy keys:', err);\n          showNotification('error', 'Не удалось скопировать ключи');\n        });\n    }\n  };\n  \n  \n  const fetchRedemptionKeys = async (page = 1) => {\n    try {\n      setKeysLoading(true);\n      \n      const response = await axios.get(`/api/admin/users/${user.id}/keys?page=${page}&per_page=10&_nocache=${Date.now()}`);\n      \n      setRedemptionKeys(response.data.keys || []);\n      setKeysPagination({\n        page: response.data.page,\n        per_page: response.data.per_page,\n        total: response.data.total,\n        pages: response.data.pages\n      });\n    } catch (error) {\n      console.error('Error fetching redemption keys:', error);\n      showNotification('error', 'Не удалось загрузить ключи активации');\n    } finally {\n      setKeysLoading(false);\n    }\n  };\n  \n  \n  const renderKeysTab = () => {\n  return (\n      <Box sx={{ mt: 2 }}>\n        <Paper sx={{ mb: 3, p: 0, overflow: 'hidden' }}>\n          <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between', borderBottom: '1px solid rgba(0, 0, 0, 0.12)' }}>\n            <Typography variant=\"h6\" component=\"h2\">\n              Управление ключами активации\n            </Typography>\n            <Box sx={{ display: 'flex', gap: 2 }}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                startIcon={<MonetizationOnIcon />}\n                component=\"a\"\n                href=\"https://www.donationalerts.com/r/qsoul\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Открыть Donation Alerts\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<VpnKeyIcon />}\n                onClick={() => setOpenKeyGenerationDialog(true)}\n              >\n                Создать ключи\n              </Button>\n            </Box>\n          </Box>\n          \n          {keysLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Ключ</TableCell>\n                      <TableCell>Тип</TableCell>\n                      <TableCell>Значение</TableCell>\n                      <TableCell>Использований</TableCell>\n                      <TableCell>Статус</TableCell>\n                      <TableCell>Действия</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {redemptionKeys.map((key) => (\n                      <TableRow key={key.id}>\n                        <TableCell>{key.key}</TableCell>\n                        <TableCell align=\"center\">\n                          {key.key_type === 'points' ? (\n                            <Chip\n                              icon={<MonetizationOnIcon style={{ color: '#7c4dff' }} />}\n                              label={`${key.points_value} баллов`}\n                              color=\"primary\"\n                              variant=\"outlined\"\n                              sx={{ fontWeight: 'bold', fontSize: 15, px: 1.5, bgcolor: 'rgba(124,77,255,0.08)' }}\n                            />\n                          ) : key.key_type === 'subscription' ? (\n                            <Chip\n                              icon={<VerifiedUserIcon style={{ color: '#4caf50' }} />}\n                              label={\n                                key.subscription_type === 'basic' ? 'Базовая' :\n                                key.subscription_type === 'premium' ? 'Премиум' :\n                                key.subscription_type === 'ultimate' ? 'Ультимейт' :\n                                key.subscription_type\n                              }\n                              color=\"success\"\n                              variant=\"outlined\"\n                              sx={{ fontWeight: 'bold', fontSize: 15, px: 1.5, bgcolor: 'rgba(76,175,80,0.08)' }}\n                            />\n                          ) : (\n                            '-'\n                          )}\n                        </TableCell>\n                        <TableCell>{key.current_uses}/{key.max_uses}</TableCell>\n                        <TableCell>\n                          {key.is_valid ? (\n                            <Chip \n                              label=\"Активен\" \n                              color=\"success\" \n                              size=\"small\"\n                            />\n                          ) : (\n                            <Chip \n                              label=\"Использован\" \n                              color=\"error\" \n                              size=\"small\"\n                            />\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <IconButton \n                            size=\"small\" \n                            onClick={() => handleDeleteKey(key.id)}\n                            color=\"error\"\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              \n              {keysPagination.pages > 1 && (\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>\n                  <Pagination\n                    count={keysPagination.pages}\n                    page={keysPagination.page}\n                    onChange={(e, page) => fetchRedemptionKeys(page)}\n                    color=\"primary\"\n                  />\n                </Box>\n              )}\n            </>\n          )}\n        </Paper>\n      </Box>\n    );\n  };\n  \n  \n  const keyGenerationDialog = (\n    <Dialog\n      open={openKeyGenerationDialog}\n      onClose={() => !isGeneratingKeys && setOpenKeyGenerationDialog(false)}\n      fullWidth\n      maxWidth=\"sm\"\n    >\n      <DialogTitle>\n        Генерация ключей активации\n        {!isGeneratingKeys && (\n          <IconButton\n            aria-label=\"close\"\n            onClick={() => setOpenKeyGenerationDialog(false)}\n            sx={{ position: 'absolute', right: 8, top: 8 }}\n          >\n            <CloseIcon />\n          </IconButton>\n        )}\n      </DialogTitle>\n      \n      <DialogContent>\n        <Box sx={{ mt: 1 }}>\n          {generatedKeys.length > 0 ? (\n            <Box sx={{ mb: 2 }}>\n              <Box sx={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                alignItems: 'center',\n                mb: 1\n              }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  Сгенерированные ключи:\n                </Typography>\n                <Button\n                  size=\"small\"\n                  startIcon={<ContentCopyIcon />}\n                  onClick={copyKeysToClipboard}\n                >\n                  Копировать все\n                </Button>\n              </Box>\n              \n              <Paper \n                variant=\"outlined\" \n                sx={{ \n                  p: 2, \n                  maxHeight: 200, \n                  overflow: 'auto',\n                  bgcolor: 'rgba(0, 0, 0, 0.03)'\n                }}\n              >\n                {generatedKeys.map((key, index) => (\n                  <Typography\n                    key={index}\n                    variant=\"body2\"\n                    fontFamily=\"monospace\"\n                    sx={{ mb: 0.5 }}\n                  >\n                    {key}\n                  </Typography>\n                ))}\n              </Paper>\n              \n              <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => {\n                    setGeneratedKeys([]);\n                  }}\n                >\n                  Сгенерировать еще\n                </Button>\n              </Box>\n            </Box>\n          ) : (\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <InputLabel>Тип ключа</InputLabel>\n                  <Select\n                    value={keyGenerationParams.type}\n                    label=\"Тип ключа\"\n                    onChange={(e) => {\n                      const newType = e.target.value;\n                      setKeyGenerationParams({\n                        ...keyGenerationParams,\n                        type: newType,\n                        // Сбрасываем значения в зависимости от типа\n                        points: newType === 'points' ? 1000 : 0,\n                        subscription_type: newType === 'subscription' ? 'basic' : 'basic',\n                        subscription_duration_days: newType === 'subscription' ? 30 : 0\n                      });\n                    }}\n                  >\n                    <MenuItem value=\"points\">Баллы</MenuItem>\n                    <MenuItem value=\"subscription\">Подписка</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              {keyGenerationParams.type === 'points' ? (\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    label=\"Количество баллов\"\n                    type=\"number\"\n                    fullWidth\n                    value={keyGenerationParams.points}\n                    onChange={(e) => setKeyGenerationParams({\n                      ...keyGenerationParams,\n                      points: parseInt(e.target.value) || 0\n                    })}\n                    InputProps={{ inputProps: { min: 1 } }}\n                  />\n                </Grid>\n              ) : (\n                <>\n                  <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                      <InputLabel>Тип подписки</InputLabel>\n                      <Select\n                        value={keyGenerationParams.subscription_type}\n                        label=\"Тип подписки\"\n                        onChange={(e) => setKeyGenerationParams({\n                          ...keyGenerationParams,\n                          subscription_type: e.target.value\n                        })}\n                      >\n                        <MenuItem value=\"basic\">Базовая</MenuItem>\n                        <MenuItem value=\"premium\">Премиум</MenuItem>\n                        <MenuItem value=\"ultimate\">Ультимейт</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Срок действия подписки (дней)\"\n                      type=\"number\"\n                      fullWidth\n                      value={keyGenerationParams.subscription_duration_days}\n                      onChange={(e) => setKeyGenerationParams({\n                        ...keyGenerationParams,\n                        subscription_duration_days: parseInt(e.target.value) || 30\n                      })}\n                      InputProps={{ inputProps: { min: 1 } }}\n                    />\n                  </Grid>\n                </>\n              )}\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Макс. число использований\"\n                  type=\"number\"\n                  fullWidth\n                  value={keyGenerationParams.max_uses}\n                  onChange={(e) => setKeyGenerationParams({\n                    ...keyGenerationParams,\n                    max_uses: parseInt(e.target.value) || 1\n                  })}\n                  InputProps={{ inputProps: { min: 1 } }}\n                  helperText=\"Сколько раз можно использовать каждый ключ\"\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Количество ключей\"\n                  type=\"number\"\n                  fullWidth\n                  value={keyGenerationParams.count}\n                  onChange={(e) => setKeyGenerationParams({\n                    ...keyGenerationParams,\n                    count: parseInt(e.target.value) || 1\n                  })}\n                  InputProps={{ inputProps: { min: 1, max: 100 } }}\n                  helperText=\"От 1 до 100 ключей\"\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Срок действия (дней)\"\n                  type=\"number\"\n                  fullWidth\n                  value={keyGenerationParams.expires_days}\n                  onChange={(e) => setKeyGenerationParams({\n                    ...keyGenerationParams,\n                    expires_days: parseInt(e.target.value) || 0\n                  })}\n                  InputProps={{ inputProps: { min: 0 } }}\n                  helperText=\"0 = бессрочно\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <TextField\n                  label=\"Описание\"\n                  fullWidth\n                  multiline\n                  rows={2}\n                  value={keyGenerationParams.description}\n                  onChange={(e) => setKeyGenerationParams({\n                    ...keyGenerationParams,\n                    description: e.target.value\n                  })}\n                  helperText=\"Необязательное описание для администраторов\"\n                />\n              </Grid>\n            </Grid>\n          )}\n        </Box>\n      </DialogContent>\n      \n      <DialogActions>\n        {generatedKeys.length === 0 && (\n          <>\n            <Button \n              onClick={() => setOpenKeyGenerationDialog(false)} \n              disabled={isGeneratingKeys}\n            >\n              Отмена\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleGenerateKeys}\n              disabled={isGeneratingKeys}\n              startIcon={isGeneratingKeys ? <CircularProgress size={20} /> : null}\n            >\n              {isGeneratingKeys ? 'Генерация...' : 'Сгенерировать'}\n            </Button>\n          </>\n        )}\n        \n        {generatedKeys.length > 0 && (\n          <Button\n            onClick={() => {\n              setOpenKeyGenerationDialog(false);\n              setGeneratedKeys([]);\n            }}\n          >\n            Закрыть\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n  \n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <PageHeader>\n        <AdminPanelSettingsIcon sx={{ fontSize: 40, mr: 2, color: 'primary.main' }} />\n        <Typography variant=\"h4\" component=\"h1\">\n          Панель администратора\n        </Typography>\n      </PageHeader>\n      \n      <Box sx={{ mb: 3 }}>\n        <Tabs \n          value={tabValue} \n          onChange={handleTabChange} \n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}\n        >\n          <Tab icon={<PeopleIcon />} label=\"Пользователи\" id=\"tab-0\" aria-controls=\"tabpanel-0\" />\n          <Tab icon={<PostAddIcon />} label=\"Посты\" id=\"tab-1\" aria-controls=\"tabpanel-1\" />\n          <Tab icon={<MusicNoteIcon />} label=\"Музыка\" id=\"tab-2\" aria-controls=\"tabpanel-2\" />\n          <Tab icon={<SecurityIcon />} label=\"Модераторы\" id=\"tab-3\" aria-controls=\"tabpanel-3\" />\n          <Tab icon={<BugReportIcon />} label=\"Баг-репорты\" id=\"tab-4\" aria-controls=\"tabpanel-4\" />\n          <Tab icon={<AccountCircleIcon />} label=\"Аккаунты\" id=\"tab-5\" aria-controls=\"tabpanel-5\" disabled />\n          <Tab icon={<KeyIcon />} label=\"Ключи\" id=\"tab-6\" aria-controls=\"tabpanel-6\" />\n        </Tabs>\n      </Box>\n        \n      \n        {tabValue === 0 && (\n          <>\n          <ContentPaper>\n            <SearchContainer>\n              <TextField\n                label=\"Поиск пользователя\"\n                variant=\"outlined\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                fullWidth\n                size=\"small\"\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                InputProps={{\n                  endAdornment: (\n                    <IconButton size=\"small\" onClick={handleSearch}>\n                      <SearchIcon />\n                    </IconButton>\n                  ),\n                }}\n              />\n            </SearchContainer>\n            \n            {loading ? (\n              <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n              renderUsersTable()\n            )}\n          </ContentPaper>\n          </>\n        )}\n        \n      \n        {tabValue === 1 && (\n        <ContentPaper>\n            {loading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n            <Box>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>Последние посты</Typography>\n              {userPosts.length > 0 ? (\n                userPosts.map(post => (\n                  <Paper key={post.id} sx={{ p: 2, mb: 2, bgcolor: 'background.default' }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                        <Avatar src={post.author_avatar ? (post.author_avatar.startsWith('/') ? post.author_avatar : `/static/uploads/avatar/${post.author_id}/${post.author_avatar}`) : undefined} sx={{ mr: 1 }} />\n                        <Box>\n                          <Typography variant=\"subtitle2\">{post.author_name}</Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">@{post.author_username}</Typography>\n                        </Box>\n                      </Box>\n                      <IconButton color=\"error\" onClick={() => openDeletePostDialog(post)}>\n                          <DeleteIcon />\n                        </IconButton>\n                          </Box>\n                    \n                    <Typography variant=\"body1\" sx={{ mb: 2, whiteSpace: 'pre-wrap' }}>\n                      {post.content}\n                    </Typography>\n                    \n                    {post.image && (\n                      <Box sx={{ mb: 2, maxWidth: '100%', maxHeight: 300, overflow: 'hidden' }}>\n                        <img \n                          src={post.image.startsWith('/') ? post.image : `/static/uploads/posts/${post.id}/${post.image}`} \n                          alt=\"Post attachment\" \n                          style={{ width: '100%', height: 'auto', borderRadius: '8px' }} \n                        />\n                      </Box>\n                    )}\n                    \n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {new Date(post.created_at).toLocaleString()} • {post.comments_count} комментариев • {post.likes_count} лайков\n                    </Typography>\n                  </Paper>\n                ))\n              ) : (\n                <Typography>Нет постов для отображения</Typography>\n            )}\n          </Box>\n          )}\n        </ContentPaper>\n        )}\n        \n      \n        {tabValue === 2 && (\n        <ContentPaper>\n            {loading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n            <Box>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>Музыкальные треки</Typography>\n              {userTracks.length > 0 ? (\n                userTracks.map(track => (\n                  <Paper key={track.id} sx={{ p: 2, mb: 2, bgcolor: 'background.default' }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                        <Avatar src={track.cover ? `/static/uploads/tracks/${track.id}/${track.cover}` : undefined} sx={{ mr: 1, width: 50, height: 50 }} />\n                        <Box>\n                          <Typography variant=\"subtitle1\">{track.title}</Typography>\n                          <Typography variant=\"subtitle2\">{track.artist}</Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">{track.album || 'Без альбома'}</Typography>\n                        </Box>\n                      </Box>\n                      <IconButton color=\"error\" onClick={() => openDeleteTrackDialog(track)}>\n                          <DeleteIcon />\n                        </IconButton>\n                          </Box>\n                    \n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Загружен: {new Date(track.created_at).toLocaleString()} • {track.duration ? `${Math.floor(track.duration / 60)}:${String(track.duration % 60).padStart(2, '0')}` : 'Неизвестно'} • {track.play_count || 0} прослушиваний\n                    </Typography>\n                  </Paper>\n                ))\n              ) : (\n                <Typography>Нет треков для отображения</Typography>\n            )}\n          </Box>\n        )}\n      </ContentPaper>\n      )}\n      \n      \n      {tabValue === 3 && renderModeratorsTable()}\n      \n      \n      {tabValue === 4 && renderBugReportsTable()}\n      \n      \n      {tabValue === 5 && (\n        <ContentPaper>\n          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', py: 4 }}>\n            <AccountCircleIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              Управление аккаунтами в разработке\n            </Typography>\n          </Box>\n        </ContentPaper>\n      )}\n    \n      \n      {tabValue === 6 && renderKeysTab()}\n      \n      \n      <Dialog open={verifyDialogOpen} onClose={() => setVerifyDialogOpen(false)}>\n        <DialogTitle>Верификация пользователя</DialogTitle>\n        <DialogContent>\n          <Box sx={{ py: 2 }}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"verification-level-label\">Уровень верификации</InputLabel>\n              <Select\n                labelId=\"verification-level-label\"\n                id=\"verification-level\"\n                value={verificationLevel}\n                onChange={(e) => setVerificationLevel(e.target.value)}\n                label=\"Уровень верификации\"\n              >\n                <MenuItem value={0}>\n                  <em>Нет верификации</em>\n                </MenuItem>\n                <MenuItem value={1}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <CheckCircleIcon sx={{ color: '#9e9e9e', mr: 1 }} />\n                    Верифицирован\n                  </Box>\n                </MenuItem>\n                <MenuItem value={2}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <CheckCircleIcon sx={{ color: '#d67270', mr: 1 }} />\n                    Официальный аккаунт\n                  </Box>\n                </MenuItem>\n                <MenuItem value={3}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <CheckCircleIcon sx={{ color: '#b39ddb', mr: 1 }} />\n                    VIP аккаунт\n                  </Box>\n                </MenuItem>\n                <MenuItem value={4}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <CheckCircleIcon sx={{ color: '#ff9800', mr: 1 }} />\n                    Модератор\n                  </Box>\n                </MenuItem>\n                <MenuItem value={5}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <CheckCircleIcon sx={{ color: '#4caf50', mr: 1 }} />\n                    Поддержка\n                  </Box>\n                </MenuItem>\n                <MenuItem value={6}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <Icon \n                      icon=\"material-symbols:verified-rounded\" \n                      style={{ \n                        fontSize: '24px', \n                        color: '#1e88e5',\n                        marginRight: '8px'\n                      }} \n                    />\n                    Канал (Верифицированный)\n                  </Box>\n                </MenuItem>\n                <MenuItem value={7}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <Icon \n                      icon=\"material-symbols:verified-user-rounded\" \n                      style={{ \n                        fontSize: '24px', \n                        color: '#7c4dff',\n                        marginRight: '8px'\n                      }} \n                    />\n                    Канал (Премиум)\n                  </Box>\n                </MenuItem>\n              </Select>\n            </FormControl>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Верификация подтверждает, что данный аккаунт является официальным или имеет особый статус\n            </Typography>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setVerifyDialogOpen(false)} color=\"inherit\">Отмена</Button>\n          <Button onClick={handleVerifyUser} color=\"primary\" variant=\"contained\" disabled={loading}>\n            {loading ? <CircularProgress size={24} /> : 'Сохранить'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      \n      <Dialog open={badgeDialogOpen} onClose={() => setBadgeDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Выдать значок достижения</DialogTitle>\n        <DialogContent>\n          <Box sx={{ my: 2 }}>\n            <Typography variant=\"subtitle1\" sx={{ mb: 2 }}>\n              Пользователь: {selectedUser?.name} (@{selectedUser?.username})\n            </Typography>\n            \n            <FormControl fullWidth sx={{ mt: 2 }}>\n              <InputLabel>Выберите значок</InputLabel>\n              <Select\n                value={selectedBadge}\n                onChange={(e) => setSelectedBadge(e.target.value)}\n                label=\"Выберите значок\"\n              >\n                {achievements.map((badge) => (\n                  <MenuItem key={badge.id} value={badge.id}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Box \n                        component=\"img\" \n                        src={badge.image_path} \n                        alt={badge.name}\n                        sx={{ width: 30, height: 30, mr: 2, borderRadius: '50%' }}\n                        onError={(e) => {\n                          e.target.src = '/static/img/default-badge.png';\n                        }}\n                      />\n                      <Typography>{badge.display_name}</Typography>\n                      {badge.users_count > 0 && (\n                        <Chip \n                          size=\"small\" \n                          label={`${badge.users_count} пользователей`} \n                          color=\"primary\" \n                          variant=\"outlined\" \n                          sx={{ ml: 2 }} \n                        />\n                      )}\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setBadgeDialogOpen(false)} color=\"inherit\">Отмена</Button>\n          <Button \n            onClick={handleGiveBadge} \n            color=\"primary\" \n            variant=\"contained\" \n            disabled={loading || !selectedBadge}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Выдать значок'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      \n      <Dialog open={banDialogOpen} onClose={() => setBanDialogOpen(false)}>\n        <DialogTitle>\n          {selectedUser?.is_banned ? 'Разблокировать пользователя' : 'Заблокировать пользователя'}\n        </DialogTitle>\n        <DialogContent>\n          <Box sx={{ my: 2 }}>\n            <Typography variant=\"subtitle1\" sx={{ mb: 2 }}>\n              Пользователь: {selectedUser?.name} ({selectedUser?.username})\n            </Typography>\n            \n            {!selectedUser?.is_banned && (\n              <TextField\n                fullWidth\n                label=\"Причина блокировки\"\n                multiline\n                rows={4}\n                value={banReason}\n                onChange={(e) => setBanReason(e.target.value)}\n                variant=\"outlined\"\n                sx={{ mt: 2 }}\n              />\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setBanDialogOpen(false)} color=\"inherit\">Отмена</Button>\n          <Button \n            onClick={handleBanUser} \n            color={selectedUser?.is_banned ? \"success\" : \"error\"} \n            variant=\"contained\" \n            disabled={loading || (!selectedUser?.is_banned && !banReason)}\n          >\n            {loading ? (\n              <CircularProgress size={24} />\n            ) : selectedUser?.is_banned ? (\n              'Разблокировать'\n            ) : (\n              'Заблокировать'\n            )}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      \n      <Dialog open={deletePostDialogOpen} onClose={() => setDeletePostDialogOpen(false)}>\n        <DialogTitle>Удалить пост</DialogTitle>\n        <DialogContent>\n          <Box sx={{ my: 2 }}>\n            <Typography variant=\"subtitle1\">\n              Вы действительно хотите удалить этот пост?\n            </Typography>\n            {selectedPost && (\n              <Paper sx={{ p: 2, mt: 2, bgcolor: 'background.default' }}>\n                <Typography variant=\"body2\">{selectedPost.content}</Typography>\n              </Paper>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeletePostDialogOpen(false)} color=\"inherit\">Отмена</Button>\n          <Button onClick={handleDeletePost} color=\"error\" variant=\"contained\" disabled={loading}>\n            {loading ? <CircularProgress size={24} /> : 'Удалить'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      \n      <Dialog open={viewUserDialogOpen} onClose={() => setViewUserDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Avatar \n              src={selectedUser?.photo ? `/static/uploads/avatar/${selectedUser?.id}/${selectedUser?.photo}` : undefined} \n              sx={{ mr: 2 }}\n            />\n            <Box>\n              <Typography variant=\"h6\">\n                {selectedUser?.name}\n                {selectedUser?.verification_status === 'verified' && (\n                  <CheckCircleIcon \n                    sx={{ \n                      fontSize: 16, \n                      ml: 0.5, \n                      color: selectedUser?.verification_level === 1 ? '#9e9e9e' : \n                             selectedUser?.verification_level === 2 ? '#d67270' : \n                             selectedUser?.verification_level === 3 ? '#b39ddb' : \n                             selectedUser?.verification_level === 4 ? '#ff9800' : \n                             selectedUser?.verification_level === 5 ? '#4caf50' :\n                             selectedUser?.verification_level === 6 ? '#1e88e5' :\n                             selectedUser?.verification_level === 7 ? '#7c4dff' :\n                             '#D0BCFF'\n                    }} \n                  />\n                )}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">@{selectedUser?.username}</Typography>\n            </Box>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>\n            <Tab label=\"Посты\" />\n            <Tab label=\"Треки\" />\n            <Tab label=\"Общая информация\" />\n          </Tabs>\n          \n          {tabValue === 0 && (\n            <Box>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>Посты пользователя</Typography>\n              {userPosts.length === 0 ? (\n                <Typography variant=\"body1\">У пользователя нет постов</Typography>\n              ) : (\n                <List>\n                  {userPosts.map((post) => (\n                    <React.Fragment key={post.id}>\n                      <ListItem\n                        secondaryAction={\n                          <IconButton edge=\"end\" onClick={() => openDeletePostDialog(post)}>\n                            <DeleteIcon />\n                          </IconButton>\n                        }\n                      >\n                        <ListItemText\n                          primary={post.content}\n                          secondary={new Date(post.created_at).toLocaleString()}\n                        />\n                      </ListItem>\n                      <Divider />\n                    </React.Fragment>\n                  ))}\n                </List>\n              )}\n            </Box>\n          )}\n          \n          {tabValue === 1 && (\n            <Box>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>Загруженные треки</Typography>\n              {userTracks.length === 0 ? (\n                <Typography variant=\"body1\">У пользователя нет загруженных треков</Typography>\n              ) : (\n                <List>\n                  {userTracks.map((track) => (\n                    <React.Fragment key={track.id}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <MusicNoteIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary={track.title}\n                          secondary={`Артист: ${track.artist} | Альбом: ${track.album}`}\n                        />\n                      </ListItem>\n                      <Divider />\n                    </React.Fragment>\n                  ))}\n                </List>\n              )}\n            </Box>\n          )}\n          \n          {tabValue === 2 && (\n            <Grid container spacing={2}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardHeader title=\"Основная информация\" />\n                  <CardContent>\n                    <Typography><strong>ID:</strong> {selectedUser?.id}</Typography>\n                    <Typography><strong>Email:</strong> {selectedUser?.email || 'Не указан'}</Typography>\n                    {selectedUser?.telegram_id && (\n                      <Typography><strong>Telegram ID:</strong> {selectedUser?.telegram_id}</Typography>\n                    )}\n                    <Typography><strong>Дата регистрации:</strong> {new Date(selectedUser?.created_at).toLocaleString()}</Typography>\n                    <Typography>\n                      <strong>Статус:</strong> {' '}\n                      {selectedUser?.is_banned ? (\n                        <Chip size=\"small\" label=\"Заблокирован\" color=\"error\" />\n                      ) : (\n                        <Chip size=\"small\" label=\"Активен\" color=\"success\" />\n                      )}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardHeader title=\"Статистика\" />\n                  <CardContent>\n                    <Typography><strong>Подписчиков:</strong> {selectedUser?.followers_count || 0}</Typography>\n                    <Typography><strong>Подписок:</strong> {selectedUser?.following_count || 0}</Typography>\n                    <Typography><strong>Постов:</strong> {userPosts.length}</Typography>\n                    <Typography><strong>Треков:</strong> {userTracks.length}</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setViewUserDialogOpen(false)}>Закрыть</Button>\n        </DialogActions>\n      </Dialog>\n      \n      \n      <Dialog open={deleteTrackDialogOpen} onClose={() => setDeleteTrackDialogOpen(false)}>\n        <DialogTitle>Удалить трек</DialogTitle>\n        <DialogContent>\n          <Box sx={{ my: 2 }}>\n            <Typography variant=\"subtitle1\">\n              Вы действительно хотите удалить этот трек?\n            </Typography>\n            {selectedTrack && (\n              <Paper sx={{ p: 2, mt: 2, bgcolor: 'background.default' }}>\n                <Typography variant=\"body1\" fontWeight=\"bold\">{selectedTrack.title}</Typography>\n                <Typography variant=\"body2\">Артист: {selectedTrack.artist}</Typography>\n                <Typography variant=\"body2\">Альбом: {selectedTrack.album || 'Нет данных'}</Typography>\n              </Paper>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteTrackDialogOpen(false)} color=\"inherit\">Отмена</Button>\n          <Button onClick={confirmDeleteTrack} color=\"error\" variant=\"contained\" disabled={loading}>\n            {loading ? <CircularProgress size={24} /> : 'Удалить'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      \n      <Dialog open={moderatorDialogOpen} onClose={() => setModeratorDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {isModerator(selectedUser?.id) \n            ? 'Редактирование прав модератора' \n            : 'Назначить модератором'}\n        </DialogTitle>\n        <DialogContent>\n          <Box sx={{ my: 2 }}>\n            <Typography variant=\"subtitle1\" sx={{ mb: 2 }}>\n              Пользователь: {selectedUser?.name} (@{selectedUser?.username})\n            </Typography>\n            \n            <Typography variant=\"h6\" sx={{ mt: 3, mb: 2 }}>\n              <ListAltIcon sx={{ mr: 1, verticalAlign: 'middle' }} />\n              Выберите права доступа\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <FormControl component=\"fieldset\">\n                  <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                    Управление контентом\n                  </Typography>\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.delete_posts}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          delete_posts: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <DeleteIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Удаление постов</Typography>\n                      </Box>\n                    }\n                  />\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.delete_music}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          delete_music: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <MusicNoteIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Удаление музыки</Typography>\n                      </Box>\n                    }\n                  />\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.delete_comments}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          delete_comments: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <CommentIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Удаление комментариев</Typography>\n                      </Box>\n                    }\n                  />\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.delete_avatar}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          delete_avatar: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <PhotoIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Удаление аватаров</Typography>\n                      </Box>\n                    }\n                  />\n                </FormControl>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <FormControl component=\"fieldset\">\n                  <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                    Управление пользователями и баг-репортами\n                  </Typography>\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.change_user_name}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          change_user_name: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <BadgeIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Изменение имени пользователя</Typography>\n                      </Box>\n                    }\n                  />\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.change_username}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          change_username: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <AccountCircleIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Изменение username</Typography>\n                      </Box>\n                    }\n                  />\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.manage_bug_reports}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          manage_bug_reports: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <DoneIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Изменение статуса баг-репорта</Typography>\n                      </Box>\n                    }\n                  />\n                  \n                  <FormControlLabel \n                    control={\n                      <Checkbox\n                        checked={selectedPermissions.delete_bug_reports}\n                        onChange={(e) => setSelectedPermissions({\n                          ...selectedPermissions,\n                          delete_bug_reports: e.target.checked\n                        })}\n                      />\n                    }\n                    label={\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <ErrorIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                        <Typography>Удаление баг-репортов</Typography>\n                      </Box>\n                    }\n                  />\n                </FormControl>\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setModeratorDialogOpen(false)} color=\"inherit\">Отмена</Button>\n          {isModerator(selectedUser?.id) ? (\n            <>\n              <Button \n                onClick={handleUpdateModeratorPermissions} \n                color=\"primary\" \n                variant=\"contained\" \n                disabled={loading}\n              >\n                {loading ? <CircularProgress size={24} /> : 'Обновить права'}\n              </Button>\n              <Button \n                onClick={handleToggleModeratorStatus} \n                color=\"error\" \n                variant=\"outlined\" \n                disabled={loading}\n              >\n                {loading ? <CircularProgress size={24} /> : 'Снять модератора'}\n              </Button>\n            </>\n          ) : (\n            <Button \n              onClick={handleToggleModeratorStatus} \n              color=\"primary\" \n              variant=\"contained\" \n              disabled={loading}\n            >\n              {loading ? <CircularProgress size={24} /> : 'Назначить модератором'}\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n      \n      \n      <Snackbar\n        open={notification.open}\n        autoHideDuration={6000}\n        onClose={() => setNotification(prev => ({ ...prev, open: false }))}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      >\n        <Alert \n          onClose={() => setNotification(prev => ({ ...prev, open: false }))} \n          severity={notification.severity}\n          sx={{ width: '100%' }}\n        >\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    \n    \n    {keyGenerationDialog}\n    </Container>\n  );\n};\n\nexport default AdminPage; "],"names":["_interopRequireDefault","require$$0","Object","defineProperty","ListAlt","value","default","_createSvgIcon","_jsxRuntime","require$$2","jsx","d","ModeEdit","PageHeader","styled","Box","theme","display","alignItems","marginBottom","spacing","padding","ContentPaper","Paper","borderRadius","shape","boxShadow","SearchContainer","gap","AdminPage","user","useContext","AuthContext","useNavigate","tabValue","setTabValue","useState","users","setUsers","posts","setPosts","tracks","setTracks","achievements","setAchievements","loading","setLoading","searchQuery","setSearchQuery","selectedUser","setSelectedUser","userPosts","setUserPosts","userTracks","setUserTracks","verifyDialogOpen","setVerifyDialogOpen","badgeDialogOpen","setBadgeDialogOpen","banDialogOpen","setBanDialogOpen","deletePostDialogOpen","setDeletePostDialogOpen","deleteTrackDialogOpen","setDeleteTrackDialogOpen","viewUserDialogOpen","setViewUserDialogOpen","moderatorDialogOpen","setModeratorDialogOpen","verificationLevel","setVerificationLevel","selectedBadge","setSelectedBadge","selectedPost","setSelectedPost","selectedTrack","setSelectedTrack","banReason","setBanReason","selectedPermissions","setSelectedPermissions","delete_music","delete_posts","delete_avatar","delete_comments","change_user_name","change_username","manage_bug_reports","delete_bug_reports","moderators","setModerators","bugReports","setBugReports","page","setPage","rowsPerPage","setRowsPerPage","notification","setNotification","open","message","severity","openKeyGenerationDialog","setOpenKeyGenerationDialog","generatedKeys","setGeneratedKeys","keyGenerationParams","setKeyGenerationParams","type","points","subscription_type","subscription_duration_days","max_uses","count","description","expires_days","isGeneratingKeys","setIsGeneratingKeys","redemptionKeys","setRedemptionKeys","keysLoading","setKeysLoading","keysPagination","setKeysPagination","per_page","total","pages","id","Navigate","to","useEffect","fetchUsers","fetchAllAchievements","fetchModerators","fetchBugReports","fetchAllPosts","fetchAllTracks","fetchRedemptionKeys","async","response","axios","get","data","error","showNotification","url","badge_types","bug_reports","handleTabChange","event","newValue","handleSearch","openDeletePostDialog","post","handleToggleModeratorStatus","isModerator","delete","success","filter","mod","user_id","permissions","user_name","name","user_username","username","openModeratorDialog","existingModerator","find","userId","some","Date","now","keys","keyGenerationDialog","jsxs","Dialog","onClose","fullWidth","maxWidth","children","DialogTitle","IconButton","onClick","sx","position","right","top","CloseIcon","DialogContent","mt","length","mb","justifyContent","Typography","variant","fontWeight","Button","size","startIcon","ContentCopyIcon","copyKeysToClipboard","keyText","join","navigator","clipboard","writeText","then","catch","err","p","maxHeight","overflow","bgcolor","map","key","index","fontFamily","Grid","container","item","xs","FormControl","InputLabel","Select","label","onChange","e","newType","target","MenuItem","sm","TextField","parseInt","InputProps","inputProps","min","Fragment","helperText","max","multiline","rows","DialogActions","disabled","color","CircularProgress","Container","py","AdminPanelSettingsIcon","fontSize","mr","component","Tabs","scrollButtons","borderBottom","borderColor","Tab","icon","PeopleIcon","PostAddIcon","MusicNoteIcon","SecurityIcon","BugReportIcon","AccountCircleIcon","KeyIcon","onKeyPress","endAdornment","SearchIcon","my","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","slice","Avatar","src","photo","startsWith","undefined","onError","onerror","verification_status","CheckCircleIcon","ml","verification_level","email","telegram_id","is_banned","Chip","fetchUserPosts","fetchUserTracks","handleViewUser","VisibilityIcon","openVerifyDialog","VerifiedUserIcon","openBadgeDialog","EmojiEventsIcon","openBanDialog","BlockIcon","TablePagination","rowsPerPageOptions","onPageChange","newPage","onRowsPerPageChange","author_avatar","author_id","author_name","author_username","DeleteIcon","whiteSpace","content","image","alt","style","width","height","created_at","toLocaleString","comments_count","likes_count","track","cover","title","artist","album","openDeleteTrackDialog","duration","Math","floor","String","padStart","play_count","moderator","flexWrap","u","ModeEditIcon","colSpan","align","verticalAlign","report","user_photo","textOverflow","status","toLocaleDateString","minWidth","reportId","put","Error","handleUpdateBugReportStatus","handleDeleteBugReport","flexDirection","MonetizationOnIcon","href","rel","VpnKeyIcon","key_type","points_value","px","current_uses","is_valid","handleDeleteKey","Pagination","labelId","Icon","marginRight","badge","image_path","display_name","users_count","badge_type_id","reason","List","React","ListItem","secondaryAction","edge","ListItemText","primary","secondary","Divider","ListItemAvatar","md","Card","CardHeader","CardContent","followers_count","following_count","confirmDeleteTrack","trackId","handleDeleteTrack","ListAltIcon","FormControlLabel","control","Checkbox","checked","CommentIcon","PhotoIcon","BadgeIcon","DoneIcon","ErrorIcon","Snackbar","autoHideDuration","prev","anchorOrigin","vertical","horizontal","Alert"],"mappings":"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","x_google_ignoreList":[0,1]}