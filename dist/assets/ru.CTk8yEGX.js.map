{"version":3,"file":"ru.CTk8yEGX.js","sources":["../../node_modules/date-fns/locale/ru/_lib/formatDistance.js","../../node_modules/date-fns/locale/ru/_lib/formatLong.js","../../node_modules/date-fns/locale/ru/_lib/formatRelative.js","../../node_modules/date-fns/locale/ru.js","../../node_modules/date-fns/locale/ru/_lib/localize.js","../../node_modules/date-fns/locale/ru/_lib/match.js"],"sourcesContent":["function declension(scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one;\n  }\n\n  const rem10 = count % 10;\n  const rem100 = count % 100;\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace(\"{{count}}\", String(count));\n\n    // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace(\"{{count}}\", String(count));\n\n    // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace(\"{{count}}\", String(count));\n  }\n}\n\nfunction buildLocalizeTokenFn(scheme) {\n  return (count, options) => {\n    if (options?.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count);\n        } else {\n          return \"через \" + declension(scheme.regular, count);\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count);\n        } else {\n          return declension(scheme.regular, count) + \" назад\";\n        }\n      }\n    } else {\n      return declension(scheme.regular, count);\n    }\n  };\n}\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: buildLocalizeTokenFn({\n    regular: {\n      one: \"меньше секунды\",\n      singularNominative: \"меньше {{count}} секунды\",\n      singularGenitive: \"меньше {{count}} секунд\",\n      pluralGenitive: \"меньше {{count}} секунд\",\n    },\n    future: {\n      one: \"меньше, чем через секунду\",\n      singularNominative: \"меньше, чем через {{count}} секунду\",\n      singularGenitive: \"меньше, чем через {{count}} секунды\",\n      pluralGenitive: \"меньше, чем через {{count}} секунд\",\n    },\n  }),\n\n  xSeconds: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} секунда\",\n      singularGenitive: \"{{count}} секунды\",\n      pluralGenitive: \"{{count}} секунд\",\n    },\n    past: {\n      singularNominative: \"{{count}} секунду назад\",\n      singularGenitive: \"{{count}} секунды назад\",\n      pluralGenitive: \"{{count}} секунд назад\",\n    },\n    future: {\n      singularNominative: \"через {{count}} секунду\",\n      singularGenitive: \"через {{count}} секунды\",\n      pluralGenitive: \"через {{count}} секунд\",\n    },\n  }),\n\n  halfAMinute: (_count, options) => {\n    if (options?.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        return \"через полминуты\";\n      } else {\n        return \"полминуты назад\";\n      }\n    }\n\n    return \"полминуты\";\n  },\n\n  lessThanXMinutes: buildLocalizeTokenFn({\n    regular: {\n      one: \"меньше минуты\",\n      singularNominative: \"меньше {{count}} минуты\",\n      singularGenitive: \"меньше {{count}} минут\",\n      pluralGenitive: \"меньше {{count}} минут\",\n    },\n    future: {\n      one: \"меньше, чем через минуту\",\n      singularNominative: \"меньше, чем через {{count}} минуту\",\n      singularGenitive: \"меньше, чем через {{count}} минуты\",\n      pluralGenitive: \"меньше, чем через {{count}} минут\",\n    },\n  }),\n\n  xMinutes: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} минута\",\n      singularGenitive: \"{{count}} минуты\",\n      pluralGenitive: \"{{count}} минут\",\n    },\n    past: {\n      singularNominative: \"{{count}} минуту назад\",\n      singularGenitive: \"{{count}} минуты назад\",\n      pluralGenitive: \"{{count}} минут назад\",\n    },\n    future: {\n      singularNominative: \"через {{count}} минуту\",\n      singularGenitive: \"через {{count}} минуты\",\n      pluralGenitive: \"через {{count}} минут\",\n    },\n  }),\n\n  aboutXHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} часа\",\n      singularGenitive: \"около {{count}} часов\",\n      pluralGenitive: \"около {{count}} часов\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} час\",\n      singularGenitive: \"приблизительно через {{count}} часа\",\n      pluralGenitive: \"приблизительно через {{count}} часов\",\n    },\n  }),\n\n  xHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} час\",\n      singularGenitive: \"{{count}} часа\",\n      pluralGenitive: \"{{count}} часов\",\n    },\n  }),\n\n  xDays: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} день\",\n      singularGenitive: \"{{count}} дня\",\n      pluralGenitive: \"{{count}} дней\",\n    },\n  }),\n\n  aboutXWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} недели\",\n      singularGenitive: \"около {{count}} недель\",\n      pluralGenitive: \"около {{count}} недель\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} неделю\",\n      singularGenitive: \"приблизительно через {{count}} недели\",\n      pluralGenitive: \"приблизительно через {{count}} недель\",\n    },\n  }),\n\n  xWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} неделя\",\n      singularGenitive: \"{{count}} недели\",\n      pluralGenitive: \"{{count}} недель\",\n    },\n  }),\n\n  aboutXMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} месяца\",\n      singularGenitive: \"около {{count}} месяцев\",\n      pluralGenitive: \"около {{count}} месяцев\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} месяц\",\n      singularGenitive: \"приблизительно через {{count}} месяца\",\n      pluralGenitive: \"приблизительно через {{count}} месяцев\",\n    },\n  }),\n\n  xMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} месяц\",\n      singularGenitive: \"{{count}} месяца\",\n      pluralGenitive: \"{{count}} месяцев\",\n    },\n  }),\n\n  aboutXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} года\",\n      singularGenitive: \"около {{count}} лет\",\n      pluralGenitive: \"около {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} год\",\n      singularGenitive: \"приблизительно через {{count}} года\",\n      pluralGenitive: \"приблизительно через {{count}} лет\",\n    },\n  }),\n\n  xYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} год\",\n      singularGenitive: \"{{count}} года\",\n      pluralGenitive: \"{{count}} лет\",\n    },\n  }),\n\n  overXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"больше {{count}} года\",\n      singularGenitive: \"больше {{count}} лет\",\n      pluralGenitive: \"больше {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"больше, чем через {{count}} год\",\n      singularGenitive: \"больше, чем через {{count}} года\",\n      pluralGenitive: \"больше, чем через {{count}} лет\",\n    },\n  }),\n\n  almostXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"почти {{count}} год\",\n      singularGenitive: \"почти {{count}} года\",\n      pluralGenitive: \"почти {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"почти через {{count}} год\",\n      singularGenitive: \"почти через {{count}} года\",\n      pluralGenitive: \"почти через {{count}} лет\",\n    },\n  }),\n};\n\nexport const formatDistance = (token, count, options) => {\n  return formatDistanceLocale[token](count, options);\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d MMMM y 'г.'\",\n  long: \"d MMMM y 'г.'\",\n  medium: \"d MMM y 'г.'\",\n  short: \"dd.MM.y\",\n};\n\nconst timeFormats = {\n  full: \"H:mm:ss zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  any: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"any\",\n  }),\n};\n","import { isSameWeek } from \"../../../isSameWeek.js\";\n\nconst accusativeWeekdays = [\n  \"воскресенье\",\n  \"понедельник\",\n  \"вторник\",\n  \"среду\",\n  \"четверг\",\n  \"пятницу\",\n  \"субботу\",\n];\n\nfunction lastWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n      return \"'в прошлое \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в прошлый \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в прошлую \" + weekday + \" в' p\";\n  }\n}\n\nfunction thisWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  if (day === 2 /* Tue */) {\n    return \"'во \" + weekday + \" в' p\";\n  } else {\n    return \"'в \" + weekday + \" в' p\";\n  }\n}\n\nfunction nextWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n      return \"'в следующее \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в следующий \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в следующую \" + weekday + \" в' p\";\n  }\n}\n\nconst formatRelativeLocale = {\n  lastWeek: (date, baseDate, options) => {\n    const day = date.getDay();\n    if (isSameWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return lastWeek(day);\n    }\n  },\n  yesterday: \"'вчера в' p\",\n  today: \"'сегодня в' p\",\n  tomorrow: \"'завтра в' p\",\n  nextWeek: (date, baseDate, options) => {\n    const day = date.getDay();\n    if (isSameWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return nextWeek(day);\n    }\n  },\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, baseDate, options) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date, baseDate, options);\n  }\n\n  return format;\n};\n","import { formatDistance } from \"./ru/_lib/formatDistance.js\";\nimport { formatLong } from \"./ru/_lib/formatLong.js\";\nimport { formatRelative } from \"./ru/_lib/formatRelative.js\";\nimport { localize } from \"./ru/_lib/localize.js\";\nimport { match } from \"./ru/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Russian locale.\n * @language Russian\n * @iso-639-2 rus\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const ru = {\n  code: \"ru\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default ru;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"до н.э.\", \"н.э.\"],\n  abbreviated: [\"до н. э.\", \"н. э.\"],\n  wide: [\"до нашей эры\", \"нашей эры\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"1-й кв.\", \"2-й кв.\", \"3-й кв.\", \"4-й кв.\"],\n  wide: [\"1-й квартал\", \"2-й квартал\", \"3-й квартал\", \"4-й квартал\"],\n};\n\nconst monthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"март\",\n    \"апр.\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n\n  wide: [\n    \"январь\",\n    \"февраль\",\n    \"март\",\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"август\",\n    \"сентябрь\",\n    \"октябрь\",\n    \"ноябрь\",\n    \"декабрь\",\n  ],\n};\n\nconst formattingMonthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"мар.\",\n    \"апр.\",\n    \"мая\",\n    \"июн.\",\n    \"июл.\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n\n  wide: [\n    \"января\",\n    \"февраля\",\n    \"марта\",\n    \"апреля\",\n    \"мая\",\n    \"июня\",\n    \"июля\",\n    \"августа\",\n    \"сентября\",\n    \"октября\",\n    \"ноября\",\n    \"декабря\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"В\", \"П\", \"В\", \"С\", \"Ч\", \"П\", \"С\"],\n  short: [\"вс\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"],\n  abbreviated: [\"вск\", \"пнд\", \"втр\", \"срд\", \"чтв\", \"птн\", \"суб\"],\n  wide: [\n    \"воскресенье\",\n    \"понедельник\",\n    \"вторник\",\n    \"среда\",\n    \"четверг\",\n    \"пятница\",\n    \"суббота\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"веч.\",\n    night: \"ночь\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"веч.\",\n    night: \"ночь\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полночь\",\n    noon: \"полдень\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"вечер\",\n    night: \"ночь\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночи\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночи\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полночь\",\n    noon: \"полдень\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"вечера\",\n    night: \"ночи\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const number = Number(dirtyNumber);\n  const unit = options?.unit;\n\n  let suffix;\n  if (unit === \"date\") {\n    suffix = \"-е\";\n  } else if (unit === \"week\" || unit === \"minute\" || unit === \"second\") {\n    suffix = \"-я\";\n  } else {\n    suffix = \"-й\";\n  }\n\n  return number + suffix;\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"any\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^((до )?н\\.?\\s?э\\.?)/i,\n  abbreviated: /^((до )?н\\.?\\s?э\\.?)/i,\n  wide: /^(до нашей эры|нашей эры|наша эра)/i,\n};\nconst parseEraPatterns = {\n  any: [/^д/i, /^н/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,\n  wide: /^[1234](-?[ыои]?й?)? квартал/i,\n};\n\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[яфмаисонд]/i,\n  abbreviated:\n    /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\\.?/i,\n  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i,\n};\n\nconst parseMonthPatterns = {\n  narrow: [\n    /^я/i,\n    /^ф/i,\n    /^м/i,\n    /^а/i,\n    /^м/i,\n    /^и/i,\n    /^и/i,\n    /^а/i,\n    /^с/i,\n    /^о/i,\n    /^н/i,\n    /^я/i,\n  ],\n\n  any: [\n    /^я/i,\n    /^ф/i,\n    /^мар/i,\n    /^ап/i,\n    /^ма[йя]/i,\n    /^июн/i,\n    /^июл/i,\n    /^ав/i,\n    /^с/i,\n    /^о/i,\n    /^н/i,\n    /^д/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[впсч]/i,\n  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,\n  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i,\n};\n\nconst parseDayPatterns = {\n  narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  abbreviated: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i,\n};\n\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^дп/i,\n    pm: /^пп/i,\n    midnight: /^полн/i,\n    noon: /^полд/i,\n    morning: /^у/i,\n    afternoon: /^д[ен]/i,\n    evening: /^в/i,\n    night: /^н/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n"],"names":["declension","scheme","count","one","rem10","rem100","singularNominative","replace","String","singularGenitive","pluralGenitive","buildLocalizeTokenFn","options","addSuffix","comparison","future","regular","past","formatDistanceLocale","lessThanXSeconds","xSeconds","halfAMinute","_count","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatLong","date","buildFormatLongFn","formats","full","long","medium","short","defaultWidth","time","dateTime","any","accusativeWeekdays","thisWeek","day","weekday","formatRelativeLocale","lastWeek","baseDate","getDay","isSameWeek","yesterday","today","tomorrow","nextWeek","other","ru","code","formatDistance","token","formatRelative","format","localize","ordinalNumber","dirtyNumber","number","Number","unit","suffix","era","buildLocalizeFn","values","narrow","abbreviated","wide","quarter","argumentCallback","month","formattingValues","defaultFormattingWidth","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","match","buildMatchPatternFn","matchPattern","parsePattern","valueCallback","value","parseInt","buildMatchFn","matchPatterns","defaultMatchWidth","parsePatterns","defaultParseWidth","index","weekStartsOn","firstWeekContainsDate"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}